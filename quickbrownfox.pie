// PIE feature-complete smoke test: quickbrownfox.pie
// Run this after installing the compiler to verify all core features work.

// ----- Basics: variables, literals, output -----
int a = 5;
float b = 3.5;
string s = "quick brown fox";
char c = 'Z';

output("== Basics ==\n", string);
output(a, int); output("\n", string);
output(b, float); output("\n", string);
output(c, char); output("\n", string);
output(s, string); output("\n", string);

// ----- Arithmetic and comparisons -----
output("== Arithmetic & Comparisons ==\n", string);
int x = 10;
int y = 3;
output(x + y, int); output("\n", string);
output(x - y, int); output("\n", string);
output(x * y, int); output("\n", string);
output(x / y, float); output("\n", string);
output(x % y, int); output("\n", string);

if (x > y) { output("x>y\n", string); } else { output("x<=y\n", string); }
if (x >= y) { output("x>=y\n", string); } else { output("x<y\n", string); }
if (x == 10) { output("x==10\n", string); }

// Floats and promotion
output( b + 2, float ); output("\n", string);

// ----- Strings: concat, compare, length-comparisons, utilities -----
output("== Strings ==\n", string);
string s1 = "quick";
string s2 = "brown";
string s3 = s1 + s2;
output(s3, string); output("\n", string);
if (s1 < s2) { output("quick<brown\n", string); }
if (s3 == "quickbrown") { output("concat ok\n", string); }
if (s1 > 3) { output("len(quick)>3\n", string); }

if (string_contains("hello world", "world") == 1) { output("contains ok\n", string); }
if (string_starts_with("hello world", "hello") == 1) { output("starts ok\n", string); }
if (string_ends_with("hello world", "world") == 1) { output("ends ok\n", string); }
if (string_is_empty("") == 1) { output("empty ok\n", string); }

// ----- Dynamic arrays: int, float, string, char -----
output("== Dynamic Arrays ==\n", string);
int ai[] = [1,2,3];
int aj[] = [4,5];
ai = ai + aj; // concat
output(arr_size(ai), int); output("\n", string);
output(arr_indexof(ai, 5), int); output("\n", string);
output(arr_contains(ai, 2), int); output("\n", string);
output(arr_avg(ai), float); output("\n", string);
arr_push(ai, 42);
output(arr_pop(ai), int); output("\n", string);

float af[] = [1.5, 2.5, 3.5];
output(arr_size(af), int); output("\n", string);
output(arr_avg(af), float); output("\n", string);

string arrs[] = ["red", "green"];
arr_push(arrs, "blue");
output(arr_size(arrs), int); output("\n", string);
output(arr_indexof(arrs, "green"), int); output("\n", string); 

// (char dynamic array currently omitted in front-end)

// ----- Control flow: if/else, while, for, switch -----
output("== Control Flow ==\n", string);
int sum = 0;
int i = 0;
while (i < 5) { sum = sum + i; i = i + 1; }
output(sum, int); output("\n", string);

for (int j = 0; j < 3; j = j + 1) { output(j, int); output(" ", string); }
output("\n", string);

int sw = 2;
switch(sw){
    case 1: output("case1\n", string);
    case 2: output("case2\n", string);
    default: output("default\n", string);
}

// ----- Functions -----
output("== Functions ==\n", string);
int add(int p, int q) { return p + q; }
output(add(2,3), int); output("\n", string);

// ----- Math library -----
output("== Math ==\n", string);
output(sqrt(9.0), float); output("\n", string);
output(pow(2.0, 3.0), float); output("\n", string);
output(abs(-4.0), float); output("\n", string);
output(abs_int(-5), int); output("\n", string);
output(min(3.0, 4.0), float); output("\n", string);
output(max_int(7, 2), int); output("\n", string);
output(pi(), float); output("\n", string);

// ----- Dictionaries -----
output("== Dictionaries ==\n", string);
dict person = {"name": "Alice", "age": 30};
output(dict_get_string(person, "name"), string); output("\n", string);
output(dict_get_int(person, "age"), int); output("\n", string);

dict conf = dict_create();
dict_set(conf, "max_users", new_int(100));
dict_set(conf, "pi", new_float(3.14));
dict_set(conf, "host", new_string("localhost"));
output(dict_get_int(conf, "max_users"), int); output("\n", string);
output(dict_get_float(conf, "pi"), float); output("\n", string);
output(dict_get_string(conf, "host"), string); output("\n", string);

// ----- File I/O (non-fatal if not available) -----
output("== File I/O ==\n", string);
file f = file_open("qbfox.tmp", "w");
file_write(f, "hello file\n");
file_close(f);

// ----- Input (commented for CI environments) -----
// output("== Input (manual) ==\n", string);
// int readX; input(readX, int); output(readX, int);

// ----- Exit -----
// pie_exit();


