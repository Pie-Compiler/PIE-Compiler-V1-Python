// Test file demonstrating improved dictionary support with validation

dict person = {"name": "John Doe", "age": 30, "city": "New York"};

// Test 1: Safe access with validation
string username = dict_get_string(person, "name");
if(username == ""){
    output("Key 'name' not found or value is empty", string);
} else {
    output("Name found: ", string);
    output(username, string);
}

// Test 2: Check if key exists before accessing
int age_exists = dict_key_exists(person, "age");
if(age_exists == 1){
    int age = dict_get_int(person, "age");
    output("Age found: ", string);
    output(age, int);
} else {
    output("Key 'age' not found", string);
}

// Test 3: Access non-existent key safely
string non_existent = dict_get_string(person, "phone");
if(non_existent == ""){
    output("Key 'phone' not found - safe handling works", string);
} else {
    output("Phone: ", string);
    output(non_existent, string);
}

// Test 4: Check multiple keys
string[] keys_to_check = {"name", "age", "city", "phone", "email"};
int i = 0;
while(i < 5){
    string current_key = keys_to_check[i];
    int key_exists = dict_key_exists(person, current_key);
    if(key_exists == 1){
        output("Key '", string);
        output(current_key, string);
        output("' exists", string);
    } else {
        output("Key '", string);
        output(current_key, string);
        output("' does not exist", string);
    }
    i = i + 1;
}

// Test 5: Dictionary with different value types
dict mixed = {"text": "Hello World", "number": 42, "decimal": 3.14};
string text_val = dict_get_string(mixed, "text");
int num_val = dict_get_int(mixed, "number");
float dec_val = dict_get_float(mixed, "decimal");

output("Mixed dictionary values:", string);
output(text_val, string);
output(num_val, int);
output(dec_val, float);

// Test 6: Safe access with validation for mixed types
if(dict_key_exists(mixed, "text") == 1){
    output("Text key exists: ", string);
    output(dict_get_string(mixed, "text"), string);
} else {
    output("Text key not found", string);
}

if(dict_key_exists(mixed, "nonexistent") == 1){
    output("Unexpected: nonexistent key found", string);
} else {
    output("Correctly: nonexistent key not found", string);
}
