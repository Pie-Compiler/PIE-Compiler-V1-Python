
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEQleftGTLTGEQLEQleftPLUSMINUSleftMULDIVMODrightUMINUSnonassocLOWER_THAN_ELSEnonassocKEYWORD_ELSEAND ASSIGN CHAR_LITERAL COLON COMMA COMMENT DIV DOT EQ FLOAT_LITERAL GEQ GT IDENTIFIER INT_LITERAL KEYWORD_ARRAY KEYWORD_BOOL KEYWORD_BREAK KEYWORD_CASE KEYWORD_CHAR KEYWORD_CONTINUE KEYWORD_DEFAULT KEYWORD_DICT KEYWORD_DO KEYWORD_ELSE KEYWORD_EXIT KEYWORD_FALSE KEYWORD_FILE KEYWORD_FLOAT KEYWORD_FOR KEYWORD_IF KEYWORD_INT KEYWORD_NULL KEYWORD_REGEX KEYWORD_RETURN KEYWORD_SOCKET KEYWORD_STRING KEYWORD_SWITCH KEYWORD_TRUE KEYWORD_VOID KEYWORD_WHILE LBRACE LBRACKET LEQ LPAREN LT MINUS MOD MUL NEQ OR PLUS RBRACE RBRACKET RPAREN SEMICOLON STRING_LITERAL SYSTEM_ARR_AVG SYSTEM_ARR_CONTAINS SYSTEM_ARR_INDEXOF SYSTEM_ARR_POP SYSTEM_ARR_PUSH SYSTEM_ARR_SIZE SYSTEM_EXIT SYSTEM_INPUT SYSTEM_OUTPUT SYSTEM_SLEEPprogram : statement_listfunction_definition : type_specifier IDENTIFIER LPAREN params RPAREN block_statementparams : param_list\n                  | emptyparam_list : param\n                      | param_list COMMA paramparam : type_specifier IDENTIFIERstatement_list : statement\n                         | statement_list statementstatement : declaration_statement\n                    | assignment_statement\n                    | if_statement\n                    | while_statement\n                    | do_while_statement\n                    | for_statement\n                    | switch_statement\n                    | break_statement\n                    | return_statement\n                    | function_call_statement\n                    | block_statement\n                    | function_definitiondo_while_statement : KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLONswitch_statement : KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACEcase_list : case_clause\n                     | case_list case_clausecase_clause : KEYWORD_CASE expression COLON statement_list\n                       | KEYWORD_DEFAULT COLON statement_listbreak_statement : KEYWORD_BREAK SEMICOLONdeclaration_statement : type_specifier IDENTIFIER SEMICOLON\n                                | type_specifier IDENTIFIER ASSIGN expression SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON\n                                | type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON\n                                | type_specifier IDENTIFIER multi_brackets ASSIGN initializer_list SEMICOLON\n                                | type_specifier IDENTIFIER multi_brackets SEMICOLONtype_specifier : primitive_type\n                         | array_typeprimitive_type : KEYWORD_INT\n                          | KEYWORD_FLOAT\n                          | KEYWORD_CHAR\n                          | KEYWORD_VOID\n                          | KEYWORD_STRING\n                          | KEYWORD_BOOL\n                          | KEYWORD_FILE\n                          | KEYWORD_SOCKET\n                          | KEYWORD_DICT\n                          | KEYWORD_REGEX\n                          | KEYWORD_ARRAYarray_type : primitive_type LBRACKET RBRACKETmulti_brackets : LBRACKET RBRACKET LBRACKET RBRACKET\n                         | multi_brackets LBRACKET RBRACKETassignment_statement : left_hand_side ASSIGN expression SEMICOLONleft_hand_side : IDENTIFIER\n                         | subscript_accessassignment_statement_no_semi : left_hand_side ASSIGN expressionif_statement : KEYWORD_IF LPAREN expression RPAREN statement %prec LOWER_THAN_ELSE\n                        | KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statementwhile_statement : KEYWORD_WHILE LPAREN expression RPAREN statementfor_statement : KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statementfor_init : assignment_statement_no_semi SEMICOLON\n                    | declaration_statement\n                    | SEMICOLONexpression_statement : expression SEMICOLON\n                               | SEMICOLONexpression_opt : expression\n                         | assignment_statement_no_semi\n                         | increment_decrement\n                         | emptyincrement_decrement : IDENTIFIER PLUS PLUS\n                              | IDENTIFIER MINUS MINUSempty :return_statement : KEYWORD_RETURN SEMICOLON\n                           | KEYWORD_RETURN expression SEMICOLONfunction_call_statement : function_call SEMICOLONfunction_call : IDENTIFIER LPAREN argument_list RPAREN\n                        | IDENTIFIER LPAREN RPAREN\n                        | SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN\n                        | SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN\n                        | SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN\n                        | KEYWORD_EXIT LPAREN RPAREN\n                        | SYSTEM_SLEEP LPAREN expression RPAREN\n                        | SYSTEM_ARR_PUSH LPAREN expression COMMA expression RPAREN\n                        | SYSTEM_ARR_POP LPAREN expression RPAREN\n                        | SYSTEM_ARR_SIZE LPAREN expression RPAREN\n                        | SYSTEM_ARR_CONTAINS LPAREN expression COMMA expression RPAREN\n                        | SYSTEM_ARR_INDEXOF LPAREN expression COMMA expression RPAREN\n                        | SYSTEM_ARR_AVG LPAREN expression RPAREN\n                        | SYSTEM_ARR_AVG LPAREN expression COMMA expression RPARENargument_list : expression\n                        | argument_list COMMA expressionblock_statement : LBRACE RBRACE\n                          | LBRACE statement_list RBRACEinitializer_list : LBRACKET expression_list_opt RBRACKETexpression_list_opt : expression_list\n                               | emptyexpression_list : expression\n                           | expression_list COMMA expressionexpression : logical_expression\n                      | initializer_listlogical_expression : equality_expression\n                             | logical_expression AND equality_expression\n                             | logical_expression OR equality_expressionequality_expression : relational_expression\n                               | equality_expression EQ relational_expression\n                               | equality_expression NEQ relational_expressionrelational_expression : additive_expression\n                                | relational_expression GT additive_expression\n                                | relational_expression LT additive_expression\n                                | relational_expression GEQ additive_expression\n                                | relational_expression LEQ additive_expressionadditive_expression : multiplicative_expression\n                              | additive_expression PLUS multiplicative_expression\n                              | additive_expression MINUS multiplicative_expressionmultiplicative_expression : unary_expression\n                                    | multiplicative_expression MUL unary_expression\n                                    | multiplicative_expression DIV unary_expression\n                                    | multiplicative_expression MOD unary_expressionunary_expression : primary_expression\n                           | MINUS unary_expression %prec UMINUSprimary_expression : IDENTIFIER\n                             | INT_LITERAL\n                             | FLOAT_LITERAL\n                             | STRING_LITERAL\n                             | CHAR_LITERAL\n                             | KEYWORD_TRUE\n                             | KEYWORD_FALSE\n                             | KEYWORD_NULL\n                             | LPAREN expression RPAREN\n                             | function_call\n                             | subscript_access\n                             | dictionary_literaldictionary_literal : LBRACE key_value_list_opt RBRACEkey_value_list_opt : key_value_list\n                              | emptykey_value_list : key_value\n                          | key_value_list COMMA key_valuekey_value : expression COLON expressionsubscript_access : IDENTIFIER LBRACKET expression RBRACKET\n                           | subscript_access LBRACKET expression RBRACKET'
    
_lr_action_items = {'KEYWORD_IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,63,64,65,90,103,124,125,166,176,177,178,221,225,232,233,249,254,255,257,274,275,276,277,278,279,282,284,285,286,287,289,],[19,19,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,19,19,-9,-93,19,-28,-74,-76,-29,-94,-75,-37,-54,19,19,-30,-35,-58,-60,-31,-36,-2,19,-33,-34,-59,-22,19,-23,19,-32,-61,19,19,19,]),'KEYWORD_WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,59,62,63,64,65,90,103,124,125,166,176,177,178,221,225,232,233,249,254,255,257,274,275,276,277,278,279,282,284,285,286,287,289,],[20,20,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,20,20,-9,115,-93,20,-28,-74,-76,-29,-94,-75,-37,-54,20,20,-30,-35,-58,-60,-31,-36,-2,20,-33,-34,-59,-22,20,-23,20,-32,-61,20,20,20,]),'KEYWORD_DO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,63,64,65,90,103,124,125,166,176,177,178,221,225,232,233,249,254,255,257,274,275,276,277,278,279,282,284,285,286,287,289,],[21,21,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,21,21,-9,-93,21,-28,-74,-76,-29,-94,-75,-37,-54,21,21,-30,-35,-58,-60,-31,-36,-2,21,-33,-34,-59,-22,21,-23,21,-32,-61,21,21,21,]),'KEYWORD_FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,63,64,65,90,103,124,125,166,176,177,178,221,225,232,233,249,254,255,257,274,275,276,277,278,279,282,284,285,286,287,289,],[22,22,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,22,22,-9,-93,22,-28,-74,-76,-29,-94,-75,-37,-54,22,22,-30,-35,-58,-60,-31,-36,-2,22,-33,-34,-59,-22,22,-23,22,-32,-61,22,22,22,]),'KEYWORD_SWITCH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,63,64,65,90,103,124,125,166,176,177,178,221,225,232,233,249,254,255,257,274,275,276,277,278,279,282,284,285,286,287,289,],[23,23,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,23,23,-9,-93,23,-28,-74,-76,-29,-94,-75,-37,-54,23,23,-30,-35,-58,-60,-31,-36,-2,23,-33,-34,-59,-22,23,-23,23,-32,-61,23,23,23,]),'KEYWORD_BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,63,64,65,90,103,124,125,166,176,177,178,221,225,232,233,249,254,255,257,274,275,276,277,278,279,282,284,285,286,287,289,],[25,25,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,25,25,-9,-93,25,-28,-74,-76,-29,-94,-75,-37,-54,25,25,-30,-35,-58,-60,-31,-36,-2,25,-33,-34,-59,-22,25,-23,25,-32,-61,25,25,25,]),'KEYWORD_RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,63,64,65,90,103,124,125,166,176,177,178,221,225,232,233,249,254,255,257,274,275,276,277,278,279,282,284,285,286,287,289,],[26,26,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,26,26,-9,-93,26,-28,-74,-76,-29,-94,-75,-37,-54,26,26,-30,-35,-58,-60,-31,-36,-2,26,-33,-34,-59,-22,26,-23,26,-32,-61,26,26,26,]),'LBRACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,92,94,96,97,98,99,100,101,102,103,104,105,116,117,119,124,125,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,176,177,178,179,187,188,190,196,208,209,214,217,218,220,221,224,225,229,232,233,235,249,254,255,257,264,267,274,275,276,277,278,279,282,284,285,286,287,289,],[24,24,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,24,24,89,-9,89,89,89,89,89,89,-93,24,-28,-74,89,89,89,89,-76,89,89,89,89,89,89,89,89,89,-29,89,89,89,-64,-63,-94,-75,89,89,89,89,89,89,89,89,89,89,89,89,89,-37,89,-54,24,24,89,-62,89,239,89,89,89,89,89,89,89,-30,89,-35,24,-58,-60,89,-31,-36,-2,24,89,89,-33,-34,-59,-22,24,-23,24,-32,-61,24,24,24,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,24,26,28,29,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,60,61,62,63,64,65,70,74,85,89,90,92,93,94,96,97,98,99,100,101,102,103,104,105,116,117,119,121,124,125,126,127,128,129,134,135,136,137,138,139,140,141,142,150,166,168,174,176,177,178,179,187,188,196,208,209,214,217,218,220,221,224,225,232,233,235,249,254,255,257,264,267,274,275,276,277,278,279,282,284,285,286,287,289,],[17,17,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,53,17,17,77,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-9,77,77,77,77,77,122,77,-93,17,-28,-74,77,77,77,77,-76,77,152,77,77,77,77,77,77,77,77,-29,77,77,185,-64,-63,189,-94,-75,77,77,77,77,77,77,77,77,77,77,77,77,77,-51,-37,228,77,-54,17,17,77,-62,77,77,77,77,77,77,77,77,-30,77,-35,-58,-60,185,-31,-36,-2,17,77,77,-33,-34,-59,-22,17,-23,17,-32,-61,17,17,17,]),'SYSTEM_INPUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,92,94,96,97,98,99,100,101,102,103,104,105,116,117,119,124,125,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,176,177,178,179,187,188,196,208,209,214,217,218,220,221,224,225,232,233,235,249,254,255,257,264,267,274,275,276,277,278,279,282,284,285,286,287,289,],[31,31,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,31,31,31,-9,31,31,31,31,31,31,-93,31,-28,-74,31,31,31,31,-76,31,31,31,31,31,31,31,31,31,-29,31,31,31,-64,-63,-94,-75,31,31,31,31,31,31,31,31,31,31,31,31,31,-37,31,-54,31,31,31,-62,31,31,31,31,31,31,31,31,-30,31,-35,-58,-60,31,-31,-36,-2,31,31,31,-33,-34,-59,-22,31,-23,31,-32,-61,31,31,31,]),'SYSTEM_OUTPUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,92,94,96,97,98,99,100,101,102,103,104,105,116,117,119,124,125,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,176,177,178,179,187,188,196,208,209,214,217,218,220,221,224,225,232,233,235,249,254,255,257,264,267,274,275,276,277,278,279,282,284,285,286,287,289,],[32,32,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,32,32,32,-9,32,32,32,32,32,32,-93,32,-28,-74,32,32,32,32,-76,32,32,32,32,32,32,32,32,32,-29,32,32,32,-64,-63,-94,-75,32,32,32,32,32,32,32,32,32,32,32,32,32,-37,32,-54,32,32,32,-62,32,32,32,32,32,32,32,32,-30,32,-35,-58,-60,32,-31,-36,-2,32,32,32,-33,-34,-59,-22,32,-23,32,-32,-61,32,32,32,]),'KEYWORD_EXIT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,92,94,96,97,98,99,100,101,102,103,104,105,116,117,119,124,125,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,176,177,178,179,187,188,196,208,209,214,217,218,220,221,224,225,232,233,235,249,254,255,257,264,267,274,275,276,277,278,279,282,284,285,286,287,289,],[33,33,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,33,33,33,-9,33,33,33,33,33,33,-93,33,-28,-74,33,33,33,33,-76,33,33,33,33,33,33,33,33,33,-29,33,33,33,-64,-63,-94,-75,33,33,33,33,33,33,33,33,33,33,33,33,33,-37,33,-54,33,33,33,-62,33,33,33,33,33,33,33,33,-30,33,-35,-58,-60,33,-31,-36,-2,33,33,33,-33,-34,-59,-22,33,-23,33,-32,-61,33,33,33,]),'SYSTEM_SLEEP':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,92,94,96,97,98,99,100,101,102,103,104,105,116,117,119,124,125,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,176,177,178,179,187,188,196,208,209,214,217,218,220,221,224,225,232,233,235,249,254,255,257,264,267,274,275,276,277,278,279,282,284,285,286,287,289,],[34,34,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,34,34,34,-9,34,34,34,34,34,34,-93,34,-28,-74,34,34,34,34,-76,34,34,34,34,34,34,34,34,34,-29,34,34,34,-64,-63,-94,-75,34,34,34,34,34,34,34,34,34,34,34,34,34,-37,34,-54,34,34,34,-62,34,34,34,34,34,34,34,34,-30,34,-35,-58,-60,34,-31,-36,-2,34,34,34,-33,-34,-59,-22,34,-23,34,-32,-61,34,34,34,]),'SYSTEM_ARR_PUSH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,92,94,96,97,98,99,100,101,102,103,104,105,116,117,119,124,125,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,176,177,178,179,187,188,196,208,209,214,217,218,220,221,224,225,232,233,235,249,254,255,257,264,267,274,275,276,277,278,279,282,284,285,286,287,289,],[35,35,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,35,35,35,-9,35,35,35,35,35,35,-93,35,-28,-74,35,35,35,35,-76,35,35,35,35,35,35,35,35,35,-29,35,35,35,-64,-63,-94,-75,35,35,35,35,35,35,35,35,35,35,35,35,35,-37,35,-54,35,35,35,-62,35,35,35,35,35,35,35,35,-30,35,-35,-58,-60,35,-31,-36,-2,35,35,35,-33,-34,-59,-22,35,-23,35,-32,-61,35,35,35,]),'SYSTEM_ARR_POP':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,92,94,96,97,98,99,100,101,102,103,104,105,116,117,119,124,125,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,176,177,178,179,187,188,196,208,209,214,217,218,220,221,224,225,232,233,235,249,254,255,257,264,267,274,275,276,277,278,279,282,284,285,286,287,289,],[36,36,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,36,36,36,-9,36,36,36,36,36,36,-93,36,-28,-74,36,36,36,36,-76,36,36,36,36,36,36,36,36,36,-29,36,36,36,-64,-63,-94,-75,36,36,36,36,36,36,36,36,36,36,36,36,36,-37,36,-54,36,36,36,-62,36,36,36,36,36,36,36,36,-30,36,-35,-58,-60,36,-31,-36,-2,36,36,36,-33,-34,-59,-22,36,-23,36,-32,-61,36,36,36,]),'SYSTEM_ARR_SIZE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,92,94,96,97,98,99,100,101,102,103,104,105,116,117,119,124,125,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,176,177,178,179,187,188,196,208,209,214,217,218,220,221,224,225,232,233,235,249,254,255,257,264,267,274,275,276,277,278,279,282,284,285,286,287,289,],[37,37,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,37,37,37,-9,37,37,37,37,37,37,-93,37,-28,-74,37,37,37,37,-76,37,37,37,37,37,37,37,37,37,-29,37,37,37,-64,-63,-94,-75,37,37,37,37,37,37,37,37,37,37,37,37,37,-37,37,-54,37,37,37,-62,37,37,37,37,37,37,37,37,-30,37,-35,-58,-60,37,-31,-36,-2,37,37,37,-33,-34,-59,-22,37,-23,37,-32,-61,37,37,37,]),'SYSTEM_ARR_CONTAINS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,92,94,96,97,98,99,100,101,102,103,104,105,116,117,119,124,125,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,176,177,178,179,187,188,196,208,209,214,217,218,220,221,224,225,232,233,235,249,254,255,257,264,267,274,275,276,277,278,279,282,284,285,286,287,289,],[38,38,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,38,38,38,-9,38,38,38,38,38,38,-93,38,-28,-74,38,38,38,38,-76,38,38,38,38,38,38,38,38,38,-29,38,38,38,-64,-63,-94,-75,38,38,38,38,38,38,38,38,38,38,38,38,38,-37,38,-54,38,38,38,-62,38,38,38,38,38,38,38,38,-30,38,-35,-58,-60,38,-31,-36,-2,38,38,38,-33,-34,-59,-22,38,-23,38,-32,-61,38,38,38,]),'SYSTEM_ARR_INDEXOF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,92,94,96,97,98,99,100,101,102,103,104,105,116,117,119,124,125,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,176,177,178,179,187,188,196,208,209,214,217,218,220,221,224,225,232,233,235,249,254,255,257,264,267,274,275,276,277,278,279,282,284,285,286,287,289,],[39,39,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,39,39,39,-9,39,39,39,39,39,39,-93,39,-28,-74,39,39,39,39,-76,39,39,39,39,39,39,39,39,39,-29,39,39,39,-64,-63,-94,-75,39,39,39,39,39,39,39,39,39,39,39,39,39,-37,39,-54,39,39,39,-62,39,39,39,39,39,39,39,39,-30,39,-35,-58,-60,39,-31,-36,-2,39,39,39,-33,-34,-59,-22,39,-23,39,-32,-61,39,39,39,]),'SYSTEM_ARR_AVG':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,55,56,57,58,61,62,63,64,65,70,74,85,89,90,92,94,96,97,98,99,100,101,102,103,104,105,116,117,119,124,125,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,176,177,178,179,187,188,196,208,209,214,217,218,220,221,224,225,232,233,235,249,254,255,257,264,267,274,275,276,277,278,279,282,284,285,286,287,289,],[40,40,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,40,40,40,-9,40,40,40,40,40,40,-93,40,-28,-74,40,40,40,40,-76,40,40,40,40,40,40,40,40,40,-29,40,40,40,-64,-63,-94,-75,40,40,40,40,40,40,40,40,40,40,40,40,40,-37,40,-54,40,40,40,-62,40,40,40,40,40,40,40,40,-30,40,-35,-58,-60,40,-31,-36,-2,40,40,40,-33,-34,-59,-22,40,-23,40,-32,-61,40,40,40,]),'KEYWORD_INT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,103,107,124,125,166,176,177,178,211,212,221,225,230,232,233,249,254,255,257,274,275,276,277,278,279,282,284,285,286,287,289,],[41,41,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,41,41,-9,41,-93,41,-28,-74,-76,-29,41,-94,-75,-37,-54,41,41,41,41,-30,-35,41,-58,-60,-31,-36,-2,41,-33,-34,-59,-22,41,-23,41,-32,-61,41,41,41,]),'KEYWORD_FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,103,107,124,125,166,176,177,178,211,212,221,225,230,232,233,249,254,255,257,274,275,276,277,278,279,282,284,285,286,287,289,],[42,42,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,42,42,-9,42,-93,42,-28,-74,-76,-29,42,-94,-75,-37,-54,42,42,42,42,-30,-35,42,-58,-60,-31,-36,-2,42,-33,-34,-59,-22,42,-23,42,-32,-61,42,42,42,]),'KEYWORD_CHAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,103,107,124,125,166,176,177,178,211,212,221,225,230,232,233,249,254,255,257,274,275,276,277,278,279,282,284,285,286,287,289,],[43,43,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,43,43,-9,43,-93,43,-28,-74,-76,-29,43,-94,-75,-37,-54,43,43,43,43,-30,-35,43,-58,-60,-31,-36,-2,43,-33,-34,-59,-22,43,-23,43,-32,-61,43,43,43,]),'KEYWORD_VOID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,103,107,124,125,166,176,177,178,211,212,221,225,230,232,233,249,254,255,257,274,275,276,277,278,279,282,284,285,286,287,289,],[44,44,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,44,44,-9,44,-93,44,-28,-74,-76,-29,44,-94,-75,-37,-54,44,44,44,44,-30,-35,44,-58,-60,-31,-36,-2,44,-33,-34,-59,-22,44,-23,44,-32,-61,44,44,44,]),'KEYWORD_STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,103,107,124,125,166,176,177,178,211,212,221,225,230,232,233,249,254,255,257,274,275,276,277,278,279,282,284,285,286,287,289,],[45,45,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,45,45,-9,45,-93,45,-28,-74,-76,-29,45,-94,-75,-37,-54,45,45,45,45,-30,-35,45,-58,-60,-31,-36,-2,45,-33,-34,-59,-22,45,-23,45,-32,-61,45,45,45,]),'KEYWORD_BOOL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,103,107,124,125,166,176,177,178,211,212,221,225,230,232,233,249,254,255,257,274,275,276,277,278,279,282,284,285,286,287,289,],[46,46,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,46,46,-9,46,-93,46,-28,-74,-76,-29,46,-94,-75,-37,-54,46,46,46,46,-30,-35,46,-58,-60,-31,-36,-2,46,-33,-34,-59,-22,46,-23,46,-32,-61,46,46,46,]),'KEYWORD_FILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,103,107,124,125,166,176,177,178,211,212,221,225,230,232,233,249,254,255,257,274,275,276,277,278,279,282,284,285,286,287,289,],[47,47,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,47,47,-9,47,-93,47,-28,-74,-76,-29,47,-94,-75,-37,-54,47,47,47,47,-30,-35,47,-58,-60,-31,-36,-2,47,-33,-34,-59,-22,47,-23,47,-32,-61,47,47,47,]),'KEYWORD_SOCKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,103,107,124,125,166,176,177,178,211,212,221,225,230,232,233,249,254,255,257,274,275,276,277,278,279,282,284,285,286,287,289,],[48,48,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,48,48,-9,48,-93,48,-28,-74,-76,-29,48,-94,-75,-37,-54,48,48,48,48,-30,-35,48,-58,-60,-31,-36,-2,48,-33,-34,-59,-22,48,-23,48,-32,-61,48,48,48,]),'KEYWORD_DICT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,103,107,124,125,166,176,177,178,211,212,221,225,230,232,233,249,254,255,257,274,275,276,277,278,279,282,284,285,286,287,289,],[49,49,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,49,49,-9,49,-93,49,-28,-74,-76,-29,49,-94,-75,-37,-54,49,49,49,49,-30,-35,49,-58,-60,-31,-36,-2,49,-33,-34,-59,-22,49,-23,49,-32,-61,49,49,49,]),'KEYWORD_REGEX':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,103,107,124,125,166,176,177,178,211,212,221,225,230,232,233,249,254,255,257,274,275,276,277,278,279,282,284,285,286,287,289,],[50,50,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,50,50,-9,50,-93,50,-28,-74,-76,-29,50,-94,-75,-37,-54,50,50,50,50,-30,-35,50,-58,-60,-31,-36,-2,50,-33,-34,-59,-22,50,-23,50,-32,-61,50,50,50,]),'KEYWORD_ARRAY':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,60,62,63,64,65,90,103,107,124,125,166,176,177,178,211,212,221,225,230,232,233,249,254,255,257,274,275,276,277,278,279,282,284,285,286,287,289,],[51,51,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,51,51,-9,51,-93,51,-28,-74,-76,-29,51,-94,-75,-37,-54,51,51,51,51,-30,-35,51,-58,-60,-31,-36,-2,51,-33,-34,-59,-22,51,-23,51,-32,-61,51,51,51,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,52,62,64,65,90,103,124,125,166,176,221,225,232,233,249,254,255,274,275,276,277,279,284,285,],[0,-1,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-9,-93,-28,-74,-76,-29,-94,-75,-37,-54,-30,-35,-58,-60,-31,-36,-2,-33,-34,-59,-22,-23,-32,-61,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,24,52,62,63,64,65,67,68,69,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,103,109,124,125,143,145,146,147,148,154,166,173,175,176,191,192,193,194,195,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,219,221,225,232,233,241,242,249,254,255,262,263,266,268,269,270,271,272,274,275,276,277,279,280,284,285,287,288,289,],[-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,62,-9,-93,124,-28,-74,-100,-101,-102,-105,-108,-113,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,-131,-132,-133,-73,-76,-29,-78,-94,-75,-121,207,-135,-136,-137,-82,-37,-77,-140,-54,-103,-104,-106,-107,-95,-109,-110,-111,-112,-114,-115,-117,-118,-119,-130,-134,-141,-83,-85,-86,-89,-30,-35,-58,-60,-138,-139,-31,-36,-2,279,-24,-79,-80,-84,-87,-88,-90,-33,-34,-59,-22,-23,-25,-32,-61,-27,-81,-26,]),'KEYWORD_CASE':([3,4,5,6,7,8,9,10,11,12,13,14,15,52,62,64,65,90,103,124,125,166,176,221,225,232,233,239,249,254,255,262,263,274,275,276,277,279,280,284,285,287,289,],[-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-9,-93,-28,-74,-76,-29,-94,-75,-37,-54,-30,-35,-58,-60,264,-31,-36,-2,264,-24,-33,-34,-59,-22,-23,-25,-32,-61,-27,-26,]),'KEYWORD_DEFAULT':([3,4,5,6,7,8,9,10,11,12,13,14,15,52,62,64,65,90,103,124,125,166,176,221,225,232,233,239,249,254,255,262,263,274,275,276,277,279,280,284,285,287,289,],[-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-9,-93,-28,-74,-76,-29,-94,-75,-37,-54,-30,-35,-58,-60,265,-31,-36,-2,265,-24,-33,-34,-59,-22,-23,-25,-32,-61,-27,-26,]),'KEYWORD_ELSE':([4,5,6,7,8,9,10,11,12,13,14,15,62,64,65,90,103,124,125,166,176,221,225,232,233,249,254,255,274,275,276,277,279,284,285,],[-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-93,-28,-74,-76,-29,-94,-75,-37,-54,-30,-35,257,-60,-31,-36,-2,-33,-34,-59,-22,-23,-32,-61,]),'ASSIGN':([17,18,30,53,106,120,122,164,175,185,186,189,210,222,227,251,],[-55,56,-56,104,165,188,-55,224,-140,-55,-56,104,-141,250,-53,-52,]),'LPAREN':([17,19,20,22,23,26,31,32,33,34,35,36,37,38,39,40,53,54,55,56,57,58,61,70,74,77,85,89,92,94,96,97,98,99,100,101,102,103,104,105,115,116,117,119,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,179,185,187,188,196,208,209,214,217,218,220,221,224,225,235,249,254,264,267,274,275,284,],[54,57,58,60,61,85,93,94,95,96,97,98,99,100,101,102,107,85,85,85,85,85,85,85,85,54,85,85,85,85,85,85,85,85,85,85,85,-29,85,85,179,85,-64,-63,85,85,85,85,85,85,85,85,85,85,85,85,85,-37,85,85,54,-62,85,85,85,85,85,85,85,85,-30,85,-35,85,-31,-36,85,85,-33,-34,-32,]),'LBRACKET':([17,26,28,30,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,61,70,77,85,87,89,92,94,96,97,98,99,100,101,102,103,104,105,106,116,117,119,122,164,165,166,174,175,179,185,186,187,188,189,196,208,209,210,214,217,218,220,221,224,225,227,235,249,250,251,254,264,267,274,275,284,],[55,70,91,92,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,105,70,70,70,70,70,70,70,55,70,92,70,70,70,70,70,70,70,70,70,70,-29,70,70,167,70,-64,-63,55,223,70,-37,70,-140,70,55,92,-62,70,105,70,70,70,-141,70,70,70,70,-30,70,-35,-53,70,-31,70,-52,-36,70,70,-33,-34,-32,]),'SEMICOLON':([25,26,27,53,60,66,67,68,69,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,103,106,109,112,116,117,118,119,143,154,162,164,166,173,175,180,181,182,183,184,185,186,187,189,191,192,193,194,195,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,219,221,222,225,226,227,238,249,251,252,253,254,258,260,261,266,268,269,270,271,272,273,274,275,284,288,],[64,65,90,103,117,125,-100,-101,-102,-105,-108,-113,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,-131,-132,-133,-29,166,-78,176,-73,-64,187,-63,-121,-82,221,225,-37,-77,-140,235,-67,-68,-69,-70,-122,-132,-62,103,-103,-104,-106,-107,-95,-109,-110,-111,-112,-114,-115,-117,-118,-119,-130,-134,-141,-83,-85,-86,-89,-30,249,-35,254,-53,-57,-31,-52,274,275,-36,277,-71,-72,-79,-80,-84,-87,-88,-90,284,-33,-34,-32,-81,]),'MINUS':([26,54,55,56,57,58,61,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,94,96,97,98,99,100,101,102,103,104,105,109,116,117,119,126,127,128,129,134,135,136,137,138,139,140,141,142,143,154,166,173,174,175,179,185,186,187,188,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,219,220,221,224,225,235,237,249,254,264,266,267,268,269,270,271,272,274,275,284,288,],[74,74,74,74,74,74,74,74,139,-113,74,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,74,-131,-132,-133,74,74,74,74,74,74,74,74,74,74,-29,74,74,-78,74,-64,-63,74,74,74,74,74,74,74,74,74,74,74,74,74,-121,-82,-37,-77,74,-140,74,237,-132,-62,74,74,139,139,139,139,-114,-115,-117,-118,-119,-130,-134,74,74,-141,-83,74,-85,-86,74,74,-89,74,-30,74,-35,74,261,-31,-36,74,-79,74,-80,-84,-87,-88,-90,-33,-34,-32,-81,]),'INT_LITERAL':([26,54,55,56,57,58,61,70,74,85,89,92,94,96,97,98,99,100,101,102,103,104,105,116,117,119,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,179,187,188,196,208,209,214,217,218,220,221,224,225,235,249,254,264,267,274,275,284,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-29,78,78,78,-64,-63,78,78,78,78,78,78,78,78,78,78,78,78,78,-37,78,78,-62,78,78,78,78,78,78,78,78,-30,78,-35,78,-31,-36,78,78,-33,-34,-32,]),'FLOAT_LITERAL':([26,54,55,56,57,58,61,70,74,85,89,92,94,96,97,98,99,100,101,102,103,104,105,116,117,119,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,179,187,188,196,208,209,214,217,218,220,221,224,225,235,249,254,264,267,274,275,284,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-29,79,79,79,-64,-63,79,79,79,79,79,79,79,79,79,79,79,79,79,-37,79,79,-62,79,79,79,79,79,79,79,79,-30,79,-35,79,-31,-36,79,79,-33,-34,-32,]),'STRING_LITERAL':([26,54,55,56,57,58,61,70,74,85,89,92,94,96,97,98,99,100,101,102,103,104,105,116,117,119,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,179,187,188,196,208,209,214,217,218,220,221,224,225,235,249,254,264,267,274,275,284,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-29,80,80,80,-64,-63,80,80,80,80,80,80,80,80,80,80,80,80,80,-37,80,80,-62,80,80,80,80,80,80,80,80,-30,80,-35,80,-31,-36,80,80,-33,-34,-32,]),'CHAR_LITERAL':([26,54,55,56,57,58,61,70,74,85,89,92,94,96,97,98,99,100,101,102,103,104,105,116,117,119,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,179,187,188,196,208,209,214,217,218,220,221,224,225,235,249,254,264,267,274,275,284,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-29,81,81,81,-64,-63,81,81,81,81,81,81,81,81,81,81,81,81,81,-37,81,81,-62,81,81,81,81,81,81,81,81,-30,81,-35,81,-31,-36,81,81,-33,-34,-32,]),'KEYWORD_TRUE':([26,54,55,56,57,58,61,70,74,85,89,92,94,96,97,98,99,100,101,102,103,104,105,116,117,119,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,179,187,188,196,208,209,214,217,218,220,221,224,225,235,249,254,264,267,274,275,284,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-29,82,82,82,-64,-63,82,82,82,82,82,82,82,82,82,82,82,82,82,-37,82,82,-62,82,82,82,82,82,82,82,82,-30,82,-35,82,-31,-36,82,82,-33,-34,-32,]),'KEYWORD_FALSE':([26,54,55,56,57,58,61,70,74,85,89,92,94,96,97,98,99,100,101,102,103,104,105,116,117,119,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,179,187,188,196,208,209,214,217,218,220,221,224,225,235,249,254,264,267,274,275,284,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-29,83,83,83,-64,-63,83,83,83,83,83,83,83,83,83,83,83,83,83,-37,83,83,-62,83,83,83,83,83,83,83,83,-30,83,-35,83,-31,-36,83,83,-33,-34,-32,]),'KEYWORD_NULL':([26,54,55,56,57,58,61,70,74,85,89,92,94,96,97,98,99,100,101,102,103,104,105,116,117,119,126,127,128,129,134,135,136,137,138,139,140,141,142,166,174,179,187,188,196,208,209,214,217,218,220,221,224,225,235,249,254,264,267,274,275,284,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-29,84,84,84,-64,-63,84,84,84,84,84,84,84,84,84,84,84,84,84,-37,84,84,-62,84,84,84,84,84,84,84,84,-30,84,-35,84,-31,-36,84,84,-33,-34,-32,]),'RPAREN':([28,29,41,42,43,44,45,46,47,48,49,50,51,54,67,68,69,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,95,107,108,109,110,113,114,123,143,144,150,154,155,157,158,161,169,170,171,172,173,175,181,182,183,184,185,186,191,192,193,194,195,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,219,228,231,234,235,238,243,244,245,246,247,248,256,259,260,261,266,268,269,270,271,272,283,288,],[-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,109,-100,-101,-102,-105,-108,-113,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,-131,-132,-133,154,-73,173,-78,-91,177,178,190,-121,206,-51,-82,213,215,216,219,229,-3,-4,-5,-77,-140,-67,-68,-69,-70,-122,-132,-103,-104,-106,-107,-95,-109,-110,-111,-112,-114,-115,-117,-118,-119,-130,-134,-141,-83,-85,-86,-89,-7,-92,258,-73,-57,266,268,269,270,271,272,-6,278,-71,-72,-79,-80,-84,-87,-88,-90,288,-81,]),'COMMA':([28,29,41,42,43,44,45,46,47,48,49,50,51,67,68,69,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,108,109,110,131,133,143,146,148,150,152,153,154,156,159,160,161,170,172,173,175,191,192,193,194,195,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,219,228,231,240,241,242,244,256,266,268,269,270,271,272,288,],[-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-100,-101,-102,-105,-108,-113,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,-131,-132,-133,174,-78,-91,196,-98,-121,208,-137,-51,211,212,-82,214,217,218,220,230,-5,-77,-140,-103,-104,-106,-107,-95,-109,-110,-111,-112,-114,-115,-117,-118,-119,-130,-134,-141,-83,-85,-86,-89,-7,-92,-99,-138,-139,267,-6,-79,-80,-84,-87,-88,-90,-81,]),'RBRACKET':([67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,91,105,109,111,130,131,132,133,143,151,154,163,167,173,175,191,192,193,194,195,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,219,223,240,266,268,269,270,271,272,288,],[-100,-101,-102,-73,-105,-108,-113,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,-131,-132,-133,150,164,-78,175,195,-96,-97,-98,-121,210,-82,222,227,-77,-140,-103,-104,-106,-107,-95,-109,-110,-111,-112,-114,-115,-117,-118,-119,-130,-134,-141,-83,-85,-86,-89,251,-99,-79,-80,-84,-87,-88,-90,-81,]),'COLON':([67,68,69,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,109,143,149,154,173,175,191,192,193,194,195,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,219,265,266,268,269,270,271,272,281,288,],[-100,-101,-102,-105,-108,-113,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,-131,-132,-133,-78,-121,209,-82,-77,-140,-103,-104,-106,-107,-95,-109,-110,-111,-112,-114,-115,-117,-118,-119,-130,-134,-141,-83,-85,-86,-89,282,-79,-80,-84,-87,-88,-90,286,-81,]),'AND':([67,69,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,109,143,154,173,175,185,186,191,192,193,194,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,219,266,268,269,270,271,272,288,],[126,-102,-105,-108,-113,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,-131,-132,-133,-78,-121,-82,-77,-140,-122,-132,-103,-104,-106,-107,-109,-110,-111,-112,-114,-115,-117,-118,-119,-130,-134,-141,-83,-85,-86,-89,-79,-80,-84,-87,-88,-90,-81,]),'OR':([67,69,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,109,143,154,173,175,185,186,191,192,193,194,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,219,266,268,269,270,271,272,288,],[127,-102,-105,-108,-113,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,-131,-132,-133,-78,-121,-82,-77,-140,-122,-132,-103,-104,-106,-107,-109,-110,-111,-112,-114,-115,-117,-118,-119,-130,-134,-141,-83,-85,-86,-89,-79,-80,-84,-87,-88,-90,-81,]),'EQ':([69,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,109,143,154,173,175,185,186,191,192,193,194,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,219,266,268,269,270,271,272,288,],[128,-105,-108,-113,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,-131,-132,-133,-78,-121,-82,-77,-140,-122,-132,128,128,-106,-107,-109,-110,-111,-112,-114,-115,-117,-118,-119,-130,-134,-141,-83,-85,-86,-89,-79,-80,-84,-87,-88,-90,-81,]),'NEQ':([69,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,109,143,154,173,175,185,186,191,192,193,194,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,219,266,268,269,270,271,272,288,],[129,-105,-108,-113,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,-131,-132,-133,-78,-121,-82,-77,-140,-122,-132,129,129,-106,-107,-109,-110,-111,-112,-114,-115,-117,-118,-119,-130,-134,-141,-83,-85,-86,-89,-79,-80,-84,-87,-88,-90,-81,]),'GT':([71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,109,143,154,173,175,185,186,193,194,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,219,266,268,269,270,271,272,288,],[134,-108,-113,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,-131,-132,-133,-78,-121,-82,-77,-140,-122,-132,134,134,-109,-110,-111,-112,-114,-115,-117,-118,-119,-130,-134,-141,-83,-85,-86,-89,-79,-80,-84,-87,-88,-90,-81,]),'LT':([71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,109,143,154,173,175,185,186,193,194,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,219,266,268,269,270,271,272,288,],[135,-108,-113,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,-131,-132,-133,-78,-121,-82,-77,-140,-122,-132,135,135,-109,-110,-111,-112,-114,-115,-117,-118,-119,-130,-134,-141,-83,-85,-86,-89,-79,-80,-84,-87,-88,-90,-81,]),'GEQ':([71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,109,143,154,173,175,185,186,193,194,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,219,266,268,269,270,271,272,288,],[136,-108,-113,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,-131,-132,-133,-78,-121,-82,-77,-140,-122,-132,136,136,-109,-110,-111,-112,-114,-115,-117,-118,-119,-130,-134,-141,-83,-85,-86,-89,-79,-80,-84,-87,-88,-90,-81,]),'LEQ':([71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,109,143,154,173,175,185,186,193,194,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,219,266,268,269,270,271,272,288,],[137,-108,-113,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,-131,-132,-133,-78,-121,-82,-77,-140,-122,-132,137,137,-109,-110,-111,-112,-114,-115,-117,-118,-119,-130,-134,-141,-83,-85,-86,-89,-79,-80,-84,-87,-88,-90,-81,]),'PLUS':([72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,109,143,154,173,175,185,186,197,198,199,200,201,202,203,204,205,206,207,210,213,215,216,219,236,266,268,269,270,271,272,288,],[138,-113,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,-131,-132,-133,-78,-121,-82,-77,-140,236,-132,138,138,138,138,-114,-115,-117,-118,-119,-130,-134,-141,-83,-85,-86,-89,260,-79,-80,-84,-87,-88,-90,-81,]),'MUL':([73,75,76,77,78,79,80,81,82,83,84,86,87,88,109,143,154,173,175,185,186,201,202,203,204,205,206,207,210,213,215,216,219,266,268,269,270,271,272,288,],[140,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,-131,-132,-133,-78,-121,-82,-77,-140,-122,-132,140,140,-117,-118,-119,-130,-134,-141,-83,-85,-86,-89,-79,-80,-84,-87,-88,-90,-81,]),'DIV':([73,75,76,77,78,79,80,81,82,83,84,86,87,88,109,143,154,173,175,185,186,201,202,203,204,205,206,207,210,213,215,216,219,266,268,269,270,271,272,288,],[141,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,-131,-132,-133,-78,-121,-82,-77,-140,-122,-132,141,141,-117,-118,-119,-130,-134,-141,-83,-85,-86,-89,-79,-80,-84,-87,-88,-90,-81,]),'MOD':([73,75,76,77,78,79,80,81,82,83,84,86,87,88,109,143,154,173,175,185,186,201,202,203,204,205,206,207,210,213,215,216,219,266,268,269,270,271,272,288,],[142,-116,-120,-122,-123,-124,-125,-126,-127,-128,-129,-131,-132,-133,-78,-121,-82,-77,-140,-122,-132,142,142,-117,-118,-119,-130,-134,-141,-83,-85,-86,-89,-79,-80,-84,-87,-88,-90,-81,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,24,282,286,],[2,63,287,289,]),'statement':([0,2,21,24,63,177,178,257,278,282,286,287,289,],[3,52,59,3,52,232,233,276,285,3,3,52,52,]),'declaration_statement':([0,2,21,24,60,63,177,178,257,278,282,286,287,289,],[4,4,4,4,119,4,4,4,4,4,4,4,4,4,]),'assignment_statement':([0,2,21,24,63,177,178,257,278,282,286,287,289,],[5,5,5,5,5,5,5,5,5,5,5,5,5,]),'if_statement':([0,2,21,24,63,177,178,257,278,282,286,287,289,],[6,6,6,6,6,6,6,6,6,6,6,6,6,]),'while_statement':([0,2,21,24,63,177,178,257,278,282,286,287,289,],[7,7,7,7,7,7,7,7,7,7,7,7,7,]),'do_while_statement':([0,2,21,24,63,177,178,257,278,282,286,287,289,],[8,8,8,8,8,8,8,8,8,8,8,8,8,]),'for_statement':([0,2,21,24,63,177,178,257,278,282,286,287,289,],[9,9,9,9,9,9,9,9,9,9,9,9,9,]),'switch_statement':([0,2,21,24,63,177,178,257,278,282,286,287,289,],[10,10,10,10,10,10,10,10,10,10,10,10,10,]),'break_statement':([0,2,21,24,63,177,178,257,278,282,286,287,289,],[11,11,11,11,11,11,11,11,11,11,11,11,11,]),'return_statement':([0,2,21,24,63,177,178,257,278,282,286,287,289,],[12,12,12,12,12,12,12,12,12,12,12,12,12,]),'function_call_statement':([0,2,21,24,63,177,178,257,278,282,286,287,289,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'block_statement':([0,2,21,24,63,177,178,229,257,278,282,286,287,289,],[14,14,14,14,14,14,14,255,14,14,14,14,14,14,]),'function_definition':([0,2,21,24,63,177,178,257,278,282,286,287,289,],[15,15,15,15,15,15,15,15,15,15,15,15,15,]),'type_specifier':([0,2,21,24,60,63,107,177,178,211,212,230,257,278,282,286,287,289,],[16,16,16,16,121,16,168,16,16,243,244,168,16,16,16,16,16,16,]),'left_hand_side':([0,2,21,24,60,63,116,177,178,235,257,278,282,286,287,289,],[18,18,18,18,120,18,120,18,18,120,18,18,18,18,18,18,]),'function_call':([0,2,21,24,26,54,55,56,57,58,61,63,70,74,85,89,92,94,96,97,98,99,100,101,102,104,105,116,126,127,128,129,134,135,136,137,138,139,140,141,142,174,177,178,179,188,196,208,209,214,217,218,220,224,235,257,264,267,278,282,286,287,289,],[27,27,27,27,86,86,86,86,86,86,86,27,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,27,27,86,86,86,86,86,86,86,86,86,86,86,27,86,86,27,27,27,27,27,]),'primitive_type':([0,2,21,24,60,63,107,177,178,211,212,230,257,278,282,286,287,289,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'array_type':([0,2,21,24,60,63,107,177,178,211,212,230,257,278,282,286,287,289,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'subscript_access':([0,2,21,24,26,54,55,56,57,58,60,61,63,70,74,85,89,92,94,96,97,98,99,100,101,102,104,105,116,126,127,128,129,134,135,136,137,138,139,140,141,142,174,177,178,179,188,196,208,209,214,217,218,220,224,235,257,264,267,278,282,286,287,289,],[30,30,30,30,87,87,87,87,87,87,30,87,30,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,186,87,87,87,87,87,87,87,87,87,87,87,87,87,87,30,30,87,87,87,87,87,87,87,87,87,87,186,30,87,87,30,30,30,30,30,]),'expression':([26,54,55,56,57,58,61,70,85,89,92,94,96,97,98,99,100,101,102,104,105,116,174,179,188,196,208,209,214,217,218,220,224,235,264,267,],[66,110,111,112,113,114,123,133,144,149,151,153,155,156,157,158,159,160,161,162,163,181,231,234,238,240,149,242,245,246,247,248,253,181,281,283,]),'logical_expression':([26,54,55,56,57,58,61,70,85,89,92,94,96,97,98,99,100,101,102,104,105,116,174,179,188,196,208,209,214,217,218,220,224,235,264,267,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'initializer_list':([26,54,55,56,57,58,61,70,85,89,92,94,96,97,98,99,100,101,102,104,105,116,165,174,179,188,196,208,209,214,217,218,220,224,235,250,264,267,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,226,68,68,68,68,68,68,68,68,68,68,252,68,273,68,68,]),'equality_expression':([26,54,55,56,57,58,61,70,85,89,92,94,96,97,98,99,100,101,102,104,105,116,126,127,174,179,188,196,208,209,214,217,218,220,224,235,264,267,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,191,192,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'relational_expression':([26,54,55,56,57,58,61,70,85,89,92,94,96,97,98,99,100,101,102,104,105,116,126,127,128,129,174,179,188,196,208,209,214,217,218,220,224,235,264,267,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,193,194,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'additive_expression':([26,54,55,56,57,58,61,70,85,89,92,94,96,97,98,99,100,101,102,104,105,116,126,127,128,129,134,135,136,137,174,179,188,196,208,209,214,217,218,220,224,235,264,267,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,197,198,199,200,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'multiplicative_expression':([26,54,55,56,57,58,61,70,85,89,92,94,96,97,98,99,100,101,102,104,105,116,126,127,128,129,134,135,136,137,138,139,174,179,188,196,208,209,214,217,218,220,224,235,264,267,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,201,202,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'unary_expression':([26,54,55,56,57,58,61,70,74,85,89,92,94,96,97,98,99,100,101,102,104,105,116,126,127,128,129,134,135,136,137,138,139,140,141,142,174,179,188,196,208,209,214,217,218,220,224,235,264,267,],[75,75,75,75,75,75,75,75,143,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,203,204,205,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'primary_expression':([26,54,55,56,57,58,61,70,74,85,89,92,94,96,97,98,99,100,101,102,104,105,116,126,127,128,129,134,135,136,137,138,139,140,141,142,174,179,188,196,208,209,214,217,218,220,224,235,264,267,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'dictionary_literal':([26,54,55,56,57,58,61,70,74,85,89,92,94,96,97,98,99,100,101,102,104,105,116,126,127,128,129,134,135,136,137,138,139,140,141,142,174,179,188,196,208,209,214,217,218,220,224,235,264,267,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'multi_brackets':([53,189,],[106,106,]),'argument_list':([54,],[108,]),'for_init':([60,],[116,]),'assignment_statement_no_semi':([60,116,235,],[118,182,182,]),'expression_list_opt':([70,],[130,]),'expression_list':([70,],[131,]),'empty':([70,89,107,116,235,],[132,147,171,184,184,]),'key_value_list_opt':([89,],[145,]),'key_value_list':([89,],[146,]),'key_value':([89,208,],[148,241,]),'params':([107,],[169,]),'param_list':([107,],[170,]),'param':([107,230,],[172,256,]),'expression_opt':([116,235,],[180,259,]),'increment_decrement':([116,235,],[183,183,]),'case_list':([239,],[262,]),'case_clause':([239,262,],[263,280,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',346),
  ('function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement','function_definition',6,'p_function_definition','parser.py',350),
  ('params -> param_list','params',1,'p_params','parser.py',358),
  ('params -> empty','params',1,'p_params','parser.py',359),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',366),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',367),
  ('param -> type_specifier IDENTIFIER','param',2,'p_param','parser.py',374),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',378),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',379),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',386),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',387),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',388),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',389),
  ('statement -> do_while_statement','statement',1,'p_statement','parser.py',390),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',391),
  ('statement -> switch_statement','statement',1,'p_statement','parser.py',392),
  ('statement -> break_statement','statement',1,'p_statement','parser.py',393),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',394),
  ('statement -> function_call_statement','statement',1,'p_statement','parser.py',395),
  ('statement -> block_statement','statement',1,'p_statement','parser.py',396),
  ('statement -> function_definition','statement',1,'p_statement','parser.py',397),
  ('do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON','do_while_statement',7,'p_do_while_statement','parser.py',401),
  ('switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE','switch_statement',7,'p_switch_statement','parser.py',405),
  ('case_list -> case_clause','case_list',1,'p_case_list','parser.py',409),
  ('case_list -> case_list case_clause','case_list',2,'p_case_list','parser.py',410),
  ('case_clause -> KEYWORD_CASE expression COLON statement_list','case_clause',4,'p_case_clause','parser.py',417),
  ('case_clause -> KEYWORD_DEFAULT COLON statement_list','case_clause',3,'p_case_clause','parser.py',418),
  ('break_statement -> KEYWORD_BREAK SEMICOLON','break_statement',2,'p_break_statement','parser.py',425),
  ('declaration_statement -> type_specifier IDENTIFIER SEMICOLON','declaration_statement',3,'p_declaration_statement','parser.py',429),
  ('declaration_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON','declaration_statement',5,'p_declaration_statement','parser.py',430),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET SEMICOLON','declaration_statement',6,'p_declaration_statement','parser.py',431),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET expression RBRACKET ASSIGN initializer_list SEMICOLON','declaration_statement',8,'p_declaration_statement','parser.py',432),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN initializer_list SEMICOLON','declaration_statement',7,'p_declaration_statement','parser.py',433),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET ASSIGN expression SEMICOLON','declaration_statement',7,'p_declaration_statement','parser.py',434),
  ('declaration_statement -> type_specifier IDENTIFIER LBRACKET RBRACKET SEMICOLON','declaration_statement',5,'p_declaration_statement','parser.py',435),
  ('declaration_statement -> type_specifier IDENTIFIER multi_brackets ASSIGN initializer_list SEMICOLON','declaration_statement',6,'p_declaration_statement','parser.py',436),
  ('declaration_statement -> type_specifier IDENTIFIER multi_brackets SEMICOLON','declaration_statement',4,'p_declaration_statement','parser.py',437),
  ('type_specifier -> primitive_type','type_specifier',1,'p_type_specifier','parser.py',467),
  ('type_specifier -> array_type','type_specifier',1,'p_type_specifier','parser.py',468),
  ('primitive_type -> KEYWORD_INT','primitive_type',1,'p_primitive_type','parser.py',472),
  ('primitive_type -> KEYWORD_FLOAT','primitive_type',1,'p_primitive_type','parser.py',473),
  ('primitive_type -> KEYWORD_CHAR','primitive_type',1,'p_primitive_type','parser.py',474),
  ('primitive_type -> KEYWORD_VOID','primitive_type',1,'p_primitive_type','parser.py',475),
  ('primitive_type -> KEYWORD_STRING','primitive_type',1,'p_primitive_type','parser.py',476),
  ('primitive_type -> KEYWORD_BOOL','primitive_type',1,'p_primitive_type','parser.py',477),
  ('primitive_type -> KEYWORD_FILE','primitive_type',1,'p_primitive_type','parser.py',478),
  ('primitive_type -> KEYWORD_SOCKET','primitive_type',1,'p_primitive_type','parser.py',479),
  ('primitive_type -> KEYWORD_DICT','primitive_type',1,'p_primitive_type','parser.py',480),
  ('primitive_type -> KEYWORD_REGEX','primitive_type',1,'p_primitive_type','parser.py',481),
  ('primitive_type -> KEYWORD_ARRAY','primitive_type',1,'p_primitive_type','parser.py',482),
  ('array_type -> primitive_type LBRACKET RBRACKET','array_type',3,'p_array_type','parser.py',487),
  ('multi_brackets -> LBRACKET RBRACKET LBRACKET RBRACKET','multi_brackets',4,'p_multi_brackets','parser.py',491),
  ('multi_brackets -> multi_brackets LBRACKET RBRACKET','multi_brackets',3,'p_multi_brackets','parser.py',492),
  ('assignment_statement -> left_hand_side ASSIGN expression SEMICOLON','assignment_statement',4,'p_assignment_statement','parser.py',499),
  ('left_hand_side -> IDENTIFIER','left_hand_side',1,'p_left_hand_side','parser.py',503),
  ('left_hand_side -> subscript_access','left_hand_side',1,'p_left_hand_side','parser.py',504),
  ('assignment_statement_no_semi -> left_hand_side ASSIGN expression','assignment_statement_no_semi',3,'p_assignment_statement_no_semi','parser.py',511),
  ('if_statement -> KEYWORD_IF LPAREN expression RPAREN statement','if_statement',5,'p_if_statement','parser.py',515),
  ('if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement','if_statement',7,'p_if_statement','parser.py',516),
  ('while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement','while_statement',5,'p_while_statement','parser.py',523),
  ('for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement','for_statement',8,'p_for_statement','parser.py',527),
  ('for_init -> assignment_statement_no_semi SEMICOLON','for_init',2,'p_for_init','parser.py',531),
  ('for_init -> declaration_statement','for_init',1,'p_for_init','parser.py',532),
  ('for_init -> SEMICOLON','for_init',1,'p_for_init','parser.py',533),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',542),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_expression_statement','parser.py',543),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','parser.py',550),
  ('expression_opt -> assignment_statement_no_semi','expression_opt',1,'p_expression_opt','parser.py',551),
  ('expression_opt -> increment_decrement','expression_opt',1,'p_expression_opt','parser.py',552),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parser.py',553),
  ('increment_decrement -> IDENTIFIER PLUS PLUS','increment_decrement',3,'p_increment_decrement','parser.py',557),
  ('increment_decrement -> IDENTIFIER MINUS MINUS','increment_decrement',3,'p_increment_decrement','parser.py',558),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',569),
  ('return_statement -> KEYWORD_RETURN SEMICOLON','return_statement',2,'p_return_statement','parser.py',573),
  ('return_statement -> KEYWORD_RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',574),
  ('function_call_statement -> function_call SEMICOLON','function_call_statement',2,'p_function_call_statement','parser.py',581),
  ('function_call -> IDENTIFIER LPAREN argument_list RPAREN','function_call',4,'p_function_call','parser.py',585),
  ('function_call -> IDENTIFIER LPAREN RPAREN','function_call',3,'p_function_call','parser.py',586),
  ('function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN','function_call',6,'p_function_call','parser.py',587),
  ('function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN','function_call',6,'p_function_call','parser.py',588),
  ('function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN','function_call',8,'p_function_call','parser.py',589),
  ('function_call -> KEYWORD_EXIT LPAREN RPAREN','function_call',3,'p_function_call','parser.py',590),
  ('function_call -> SYSTEM_SLEEP LPAREN expression RPAREN','function_call',4,'p_function_call','parser.py',591),
  ('function_call -> SYSTEM_ARR_PUSH LPAREN expression COMMA expression RPAREN','function_call',6,'p_function_call','parser.py',592),
  ('function_call -> SYSTEM_ARR_POP LPAREN expression RPAREN','function_call',4,'p_function_call','parser.py',593),
  ('function_call -> SYSTEM_ARR_SIZE LPAREN expression RPAREN','function_call',4,'p_function_call','parser.py',594),
  ('function_call -> SYSTEM_ARR_CONTAINS LPAREN expression COMMA expression RPAREN','function_call',6,'p_function_call','parser.py',595),
  ('function_call -> SYSTEM_ARR_INDEXOF LPAREN expression COMMA expression RPAREN','function_call',6,'p_function_call','parser.py',596),
  ('function_call -> SYSTEM_ARR_AVG LPAREN expression RPAREN','function_call',4,'p_function_call','parser.py',597),
  ('function_call -> SYSTEM_ARR_AVG LPAREN expression COMMA expression RPAREN','function_call',6,'p_function_call','parser.py',598),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',629),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','parser.py',630),
  ('block_statement -> LBRACE RBRACE','block_statement',2,'p_block_statement','parser.py',637),
  ('block_statement -> LBRACE statement_list RBRACE','block_statement',3,'p_block_statement','parser.py',638),
  ('initializer_list -> LBRACKET expression_list_opt RBRACKET','initializer_list',3,'p_initializer_list','parser.py',645),
  ('expression_list_opt -> expression_list','expression_list_opt',1,'p_expression_list_opt','parser.py',649),
  ('expression_list_opt -> empty','expression_list_opt',1,'p_expression_list_opt','parser.py',650),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',657),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',658),
  ('expression -> logical_expression','expression',1,'p_expression','parser.py',665),
  ('expression -> initializer_list','expression',1,'p_expression','parser.py',666),
  ('logical_expression -> equality_expression','logical_expression',1,'p_logical_expression','parser.py',670),
  ('logical_expression -> logical_expression AND equality_expression','logical_expression',3,'p_logical_expression','parser.py',671),
  ('logical_expression -> logical_expression OR equality_expression','logical_expression',3,'p_logical_expression','parser.py',672),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','parser.py',679),
  ('equality_expression -> equality_expression EQ relational_expression','equality_expression',3,'p_equality_expression','parser.py',680),
  ('equality_expression -> equality_expression NEQ relational_expression','equality_expression',3,'p_equality_expression','parser.py',681),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression','parser.py',688),
  ('relational_expression -> relational_expression GT additive_expression','relational_expression',3,'p_relational_expression','parser.py',689),
  ('relational_expression -> relational_expression LT additive_expression','relational_expression',3,'p_relational_expression','parser.py',690),
  ('relational_expression -> relational_expression GEQ additive_expression','relational_expression',3,'p_relational_expression','parser.py',691),
  ('relational_expression -> relational_expression LEQ additive_expression','relational_expression',3,'p_relational_expression','parser.py',692),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','parser.py',699),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',700),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',701),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','parser.py',708),
  ('multiplicative_expression -> multiplicative_expression MUL unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',709),
  ('multiplicative_expression -> multiplicative_expression DIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',710),
  ('multiplicative_expression -> multiplicative_expression MOD unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',711),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','parser.py',718),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','parser.py',719),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','parser.py',726),
  ('primary_expression -> INT_LITERAL','primary_expression',1,'p_primary_expression','parser.py',727),
  ('primary_expression -> FLOAT_LITERAL','primary_expression',1,'p_primary_expression','parser.py',728),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','parser.py',729),
  ('primary_expression -> CHAR_LITERAL','primary_expression',1,'p_primary_expression','parser.py',730),
  ('primary_expression -> KEYWORD_TRUE','primary_expression',1,'p_primary_expression','parser.py',731),
  ('primary_expression -> KEYWORD_FALSE','primary_expression',1,'p_primary_expression','parser.py',732),
  ('primary_expression -> KEYWORD_NULL','primary_expression',1,'p_primary_expression','parser.py',733),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','parser.py',734),
  ('primary_expression -> function_call','primary_expression',1,'p_primary_expression','parser.py',735),
  ('primary_expression -> subscript_access','primary_expression',1,'p_primary_expression','parser.py',736),
  ('primary_expression -> dictionary_literal','primary_expression',1,'p_primary_expression','parser.py',737),
  ('dictionary_literal -> LBRACE key_value_list_opt RBRACE','dictionary_literal',3,'p_dictionary_literal','parser.py',751),
  ('key_value_list_opt -> key_value_list','key_value_list_opt',1,'p_key_value_list_opt','parser.py',755),
  ('key_value_list_opt -> empty','key_value_list_opt',1,'p_key_value_list_opt','parser.py',756),
  ('key_value_list -> key_value','key_value_list',1,'p_key_value_list','parser.py',763),
  ('key_value_list -> key_value_list COMMA key_value','key_value_list',3,'p_key_value_list','parser.py',764),
  ('key_value -> expression COLON expression','key_value',3,'p_key_value','parser.py',771),
  ('subscript_access -> IDENTIFIER LBRACKET expression RBRACKET','subscript_access',4,'p_subscript_access','parser.py',775),
  ('subscript_access -> subscript_access LBRACKET expression RBRACKET','subscript_access',4,'p_subscript_access','parser.py',776),
]
