
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEQleftGTLTGEQLEQleftPLUSMINUSleftMULDIVMODrightUMINUSnonassocLOWER_THAN_ELSEnonassocKEYWORD_ELSEAND ASSIGN CHAR_LITERAL COLON COMMA COMMENT DIV DOT EQ FLOAT_LITERAL GEQ GT IDENTIFIER INT_LITERAL KEYWORD_ARRAY KEYWORD_BOOL KEYWORD_BREAK KEYWORD_CASE KEYWORD_CHAR KEYWORD_CONTINUE KEYWORD_DEFAULT KEYWORD_DICT KEYWORD_DO KEYWORD_ELSE KEYWORD_EXIT KEYWORD_FALSE KEYWORD_FILE KEYWORD_FLOAT KEYWORD_FOR KEYWORD_IF KEYWORD_INT KEYWORD_NULL KEYWORD_REGEX KEYWORD_RETURN KEYWORD_SOCKET KEYWORD_STRING KEYWORD_SWITCH KEYWORD_TRUE KEYWORD_VOID KEYWORD_WHILE LBRACE LBRACKET LEQ LPAREN LT MINUS MOD MUL NEQ OR PLUS RBRACE RBRACKET RPAREN SEMICOLON STRING_LITERAL SYSTEM_ARR_AVG SYSTEM_ARR_CONTAINS SYSTEM_ARR_INDEXOF SYSTEM_ARR_POP SYSTEM_ARR_PUSH SYSTEM_ARR_SIZE SYSTEM_EXIT SYSTEM_INPUT SYSTEM_OUTPUT SYSTEM_SLEEPprogram : statement_listfunction_definition : type_specifier IDENTIFIER LPAREN params RPAREN block_statementparams : param_list\n                  | emptyparam_list : param\n                      | param_list COMMA paramparam : type_specifier IDENTIFIERstatement_list : statement\n                         | statement_list statementstatement : declaration_statement\n                    | assignment_statement\n                    | if_statement\n                    | while_statement\n                    | do_while_statement\n                    | for_statement\n                    | switch_statement\n                    | break_statement\n                    | return_statement\n                    | function_call_statement\n                    | block_statement\n                    | function_definitiondo_while_statement : KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLONswitch_statement : KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACEcase_list : case_clause\n                     | case_list case_clausecase_clause : KEYWORD_CASE expression COLON statement_list\n                       | KEYWORD_DEFAULT COLON statement_listbreak_statement : KEYWORD_BREAK SEMICOLONdeclaration_statement : type_specifier IDENTIFIER array_specifier_opt SEMICOLON\n                                | type_specifier IDENTIFIER array_specifier_opt ASSIGN expression SEMICOLONarray_specifier_opt : array_specifier\n                              | emptyarray_specifier : LBRACKET expression RBRACKET\n                           | array_specifier LBRACKET expression RBRACKET\n                           | LBRACKET RBRACKET\n                           | array_specifier LBRACKET RBRACKETtype_specifier : primitive_type\n                         | array_typeprimitive_type : KEYWORD_INT\n                          | KEYWORD_FLOAT\n                          | KEYWORD_CHAR\n                          | KEYWORD_VOID\n                          | KEYWORD_STRING\n                          | KEYWORD_BOOL\n                          | KEYWORD_FILE\n                          | KEYWORD_SOCKET\n                          | KEYWORD_DICT\n                          | KEYWORD_REGEX\n                          | KEYWORD_ARRAYarray_type : primitive_type LBRACKET RBRACKETassignment_statement : left_hand_side ASSIGN expression SEMICOLONleft_hand_side : IDENTIFIER\n                         | subscript_accessassignment_statement_no_semi : left_hand_side ASSIGN expressionif_statement : KEYWORD_IF LPAREN expression RPAREN statement %prec LOWER_THAN_ELSE\n                        | KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statementwhile_statement : KEYWORD_WHILE LPAREN expression RPAREN statementfor_statement : KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statementfor_init : assignment_statement_no_semi SEMICOLON\n                    | declaration_statement\n                    | SEMICOLONexpression_statement : expression SEMICOLON\n                               | SEMICOLONexpression_opt : expression\n                         | assignment_statement_no_semi\n                         | increment_decrement\n                         | emptyincrement_decrement : IDENTIFIER PLUS PLUS\n                              | IDENTIFIER MINUS MINUSempty :return_statement : KEYWORD_RETURN SEMICOLON\n                           | KEYWORD_RETURN expression SEMICOLONfunction_call_statement : function_call SEMICOLONfunction_call : IDENTIFIER LPAREN argument_list RPAREN\n                        | IDENTIFIER LPAREN RPAREN\n                        | SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN\n                        | SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN\n                        | SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN\n                        | KEYWORD_EXIT LPAREN RPAREN\n                        | SYSTEM_SLEEP LPAREN expression RPAREN\n                        | SYSTEM_ARR_PUSH LPAREN expression COMMA expression RPAREN\n                        | SYSTEM_ARR_POP LPAREN expression RPAREN\n                        | SYSTEM_ARR_SIZE LPAREN expression RPAREN\n                        | SYSTEM_ARR_CONTAINS LPAREN expression COMMA expression RPAREN\n                        | SYSTEM_ARR_INDEXOF LPAREN expression COMMA expression RPAREN\n                        | SYSTEM_ARR_AVG LPAREN expression RPAREN\n                        | SYSTEM_ARR_AVG LPAREN expression COMMA expression RPARENargument_list : expression\n                        | argument_list COMMA expressionblock_statement : LBRACE RBRACE\n                          | LBRACE statement_list RBRACEinitializer_list : LBRACKET expression_list_opt RBRACKETexpression_list_opt : expression_list\n                               | emptyexpression_list : expression\n                           | expression_list COMMA expressionexpression : logical_expression\n                      | initializer_listlogical_expression : equality_expression\n                             | logical_expression AND equality_expression\n                             | logical_expression OR equality_expressionequality_expression : relational_expression\n                               | equality_expression EQ relational_expression\n                               | equality_expression NEQ relational_expressionrelational_expression : additive_expression\n                                | relational_expression GT additive_expression\n                                | relational_expression LT additive_expression\n                                | relational_expression GEQ additive_expression\n                                | relational_expression LEQ additive_expressionadditive_expression : multiplicative_expression\n                              | additive_expression PLUS multiplicative_expression\n                              | additive_expression MINUS multiplicative_expressionmultiplicative_expression : unary_expression\n                                    | multiplicative_expression MUL unary_expression\n                                    | multiplicative_expression DIV unary_expression\n                                    | multiplicative_expression MOD unary_expressionunary_expression : primary_expression\n                           | MINUS unary_expression %prec UMINUSprimary_expression : IDENTIFIER\n                             | INT_LITERAL\n                             | FLOAT_LITERAL\n                             | STRING_LITERAL\n                             | CHAR_LITERAL\n                             | KEYWORD_TRUE\n                             | KEYWORD_FALSE\n                             | KEYWORD_NULL\n                             | LPAREN expression RPAREN\n                             | function_call\n                             | subscript_access\n                             | dictionary_literaldictionary_literal : LBRACE key_value_list_opt RBRACEkey_value_list_opt : key_value_list\n                              | emptykey_value_list : key_value\n                          | key_value_list COMMA key_valuekey_value : expression COLON expressionsubscript_access : IDENTIFIER subscript_specifier_listsubscript_specifier_list : subscript_specifier\n                                   | subscript_specifier_list subscript_specifiersubscript_specifier : LBRACKET expression RBRACKET'
    
_lr_action_items = {'KEYWORD_IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,64,65,66,67,92,126,127,163,176,177,178,228,229,245,246,249,265,266,267,268,271,273,274,275,277,],[19,19,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,19,19,-9,-90,19,-28,-71,-73,-91,-72,-29,-51,19,19,-55,-57,-30,-2,19,-56,-22,19,-23,19,-58,19,19,19,]),'KEYWORD_WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,61,64,65,66,67,92,126,127,163,176,177,178,228,229,245,246,249,265,266,267,268,271,273,274,275,277,],[20,20,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,20,20,-9,117,-90,20,-28,-71,-73,-91,-72,-29,-51,20,20,-55,-57,-30,-2,20,-56,-22,20,-23,20,-58,20,20,20,]),'KEYWORD_DO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,64,65,66,67,92,126,127,163,176,177,178,228,229,245,246,249,265,266,267,268,271,273,274,275,277,],[21,21,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,21,21,-9,-90,21,-28,-71,-73,-91,-72,-29,-51,21,21,-55,-57,-30,-2,21,-56,-22,21,-23,21,-58,21,21,21,]),'KEYWORD_FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,64,65,66,67,92,126,127,163,176,177,178,228,229,245,246,249,265,266,267,268,271,273,274,275,277,],[22,22,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,22,22,-9,-90,22,-28,-71,-73,-91,-72,-29,-51,22,22,-55,-57,-30,-2,22,-56,-22,22,-23,22,-58,22,22,22,]),'KEYWORD_SWITCH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,64,65,66,67,92,126,127,163,176,177,178,228,229,245,246,249,265,266,267,268,271,273,274,275,277,],[23,23,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,23,23,-9,-90,23,-28,-71,-73,-91,-72,-29,-51,23,23,-55,-57,-30,-2,23,-56,-22,23,-23,23,-58,23,23,23,]),'KEYWORD_BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,64,65,66,67,92,126,127,163,176,177,178,228,229,245,246,249,265,266,267,268,271,273,274,275,277,],[25,25,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,25,25,-9,-90,25,-28,-71,-73,-91,-72,-29,-51,25,25,-55,-57,-30,-2,25,-56,-22,25,-23,25,-58,25,25,25,]),'KEYWORD_RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,64,65,66,67,92,126,127,163,176,177,178,228,229,245,246,249,265,266,267,268,271,273,274,275,277,],[26,26,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,26,26,-9,-90,26,-28,-71,-73,-91,-72,-29,-51,26,26,-55,-57,-30,-2,26,-56,-22,26,-23,26,-58,26,26,26,]),'LBRACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,57,58,59,60,63,64,65,66,67,72,76,87,91,92,95,97,98,99,100,101,102,103,108,118,119,121,126,127,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,176,177,178,179,187,188,190,196,208,209,213,216,217,219,222,228,229,231,245,246,249,256,259,265,266,267,268,271,273,274,275,277,],[24,24,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,24,24,91,-9,91,91,91,91,91,91,-90,24,-28,-71,91,91,91,91,-73,91,91,91,91,91,91,91,91,91,91,-61,-60,-91,-72,91,91,91,91,91,91,91,91,91,91,91,91,91,-29,91,91,91,-51,24,24,91,-59,91,235,91,91,91,91,91,91,91,24,-55,-57,91,-30,-2,24,91,91,-56,-22,24,-23,24,-58,24,24,24,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,24,26,28,29,41,42,43,44,45,46,47,48,49,50,51,52,54,57,58,59,60,62,63,64,65,66,67,72,76,87,91,92,94,95,97,98,99,100,101,102,103,108,118,119,121,123,126,127,128,129,130,131,136,137,138,139,140,141,142,143,144,152,163,164,165,170,174,176,177,178,179,187,188,196,208,209,213,216,217,219,228,229,231,245,246,249,256,259,265,266,267,268,271,273,274,275,277,],[17,17,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,53,17,17,79,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-9,79,79,79,79,79,124,79,-90,17,-28,-71,79,79,79,79,-73,153,79,79,79,79,79,79,79,79,79,185,-61,-60,189,-91,-72,79,79,79,79,79,79,79,79,79,79,79,79,79,-50,-29,79,221,79,79,-51,17,17,79,-59,79,79,79,79,79,79,79,79,-55,-57,185,-30,-2,17,79,79,-56,-22,17,-23,17,-58,17,17,17,]),'SYSTEM_INPUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,57,58,59,60,63,64,65,66,67,72,76,87,91,92,95,97,98,99,100,101,102,103,108,118,119,121,126,127,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,176,177,178,179,187,188,196,208,209,213,216,217,219,228,229,231,245,246,249,256,259,265,266,267,268,271,273,274,275,277,],[31,31,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,31,31,31,-9,31,31,31,31,31,31,-90,31,-28,-71,31,31,31,31,-73,31,31,31,31,31,31,31,31,31,31,-61,-60,-91,-72,31,31,31,31,31,31,31,31,31,31,31,31,31,-29,31,31,31,-51,31,31,31,-59,31,31,31,31,31,31,31,31,-55,-57,31,-30,-2,31,31,31,-56,-22,31,-23,31,-58,31,31,31,]),'SYSTEM_OUTPUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,57,58,59,60,63,64,65,66,67,72,76,87,91,92,95,97,98,99,100,101,102,103,108,118,119,121,126,127,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,176,177,178,179,187,188,196,208,209,213,216,217,219,228,229,231,245,246,249,256,259,265,266,267,268,271,273,274,275,277,],[32,32,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,32,32,32,-9,32,32,32,32,32,32,-90,32,-28,-71,32,32,32,32,-73,32,32,32,32,32,32,32,32,32,32,-61,-60,-91,-72,32,32,32,32,32,32,32,32,32,32,32,32,32,-29,32,32,32,-51,32,32,32,-59,32,32,32,32,32,32,32,32,-55,-57,32,-30,-2,32,32,32,-56,-22,32,-23,32,-58,32,32,32,]),'KEYWORD_EXIT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,57,58,59,60,63,64,65,66,67,72,76,87,91,92,95,97,98,99,100,101,102,103,108,118,119,121,126,127,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,176,177,178,179,187,188,196,208,209,213,216,217,219,228,229,231,245,246,249,256,259,265,266,267,268,271,273,274,275,277,],[33,33,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,33,33,33,-9,33,33,33,33,33,33,-90,33,-28,-71,33,33,33,33,-73,33,33,33,33,33,33,33,33,33,33,-61,-60,-91,-72,33,33,33,33,33,33,33,33,33,33,33,33,33,-29,33,33,33,-51,33,33,33,-59,33,33,33,33,33,33,33,33,-55,-57,33,-30,-2,33,33,33,-56,-22,33,-23,33,-58,33,33,33,]),'SYSTEM_SLEEP':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,57,58,59,60,63,64,65,66,67,72,76,87,91,92,95,97,98,99,100,101,102,103,108,118,119,121,126,127,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,176,177,178,179,187,188,196,208,209,213,216,217,219,228,229,231,245,246,249,256,259,265,266,267,268,271,273,274,275,277,],[34,34,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,34,34,34,-9,34,34,34,34,34,34,-90,34,-28,-71,34,34,34,34,-73,34,34,34,34,34,34,34,34,34,34,-61,-60,-91,-72,34,34,34,34,34,34,34,34,34,34,34,34,34,-29,34,34,34,-51,34,34,34,-59,34,34,34,34,34,34,34,34,-55,-57,34,-30,-2,34,34,34,-56,-22,34,-23,34,-58,34,34,34,]),'SYSTEM_ARR_PUSH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,57,58,59,60,63,64,65,66,67,72,76,87,91,92,95,97,98,99,100,101,102,103,108,118,119,121,126,127,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,176,177,178,179,187,188,196,208,209,213,216,217,219,228,229,231,245,246,249,256,259,265,266,267,268,271,273,274,275,277,],[35,35,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,35,35,35,-9,35,35,35,35,35,35,-90,35,-28,-71,35,35,35,35,-73,35,35,35,35,35,35,35,35,35,35,-61,-60,-91,-72,35,35,35,35,35,35,35,35,35,35,35,35,35,-29,35,35,35,-51,35,35,35,-59,35,35,35,35,35,35,35,35,-55,-57,35,-30,-2,35,35,35,-56,-22,35,-23,35,-58,35,35,35,]),'SYSTEM_ARR_POP':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,57,58,59,60,63,64,65,66,67,72,76,87,91,92,95,97,98,99,100,101,102,103,108,118,119,121,126,127,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,176,177,178,179,187,188,196,208,209,213,216,217,219,228,229,231,245,246,249,256,259,265,266,267,268,271,273,274,275,277,],[36,36,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,36,36,36,-9,36,36,36,36,36,36,-90,36,-28,-71,36,36,36,36,-73,36,36,36,36,36,36,36,36,36,36,-61,-60,-91,-72,36,36,36,36,36,36,36,36,36,36,36,36,36,-29,36,36,36,-51,36,36,36,-59,36,36,36,36,36,36,36,36,-55,-57,36,-30,-2,36,36,36,-56,-22,36,-23,36,-58,36,36,36,]),'SYSTEM_ARR_SIZE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,57,58,59,60,63,64,65,66,67,72,76,87,91,92,95,97,98,99,100,101,102,103,108,118,119,121,126,127,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,176,177,178,179,187,188,196,208,209,213,216,217,219,228,229,231,245,246,249,256,259,265,266,267,268,271,273,274,275,277,],[37,37,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,37,37,37,-9,37,37,37,37,37,37,-90,37,-28,-71,37,37,37,37,-73,37,37,37,37,37,37,37,37,37,37,-61,-60,-91,-72,37,37,37,37,37,37,37,37,37,37,37,37,37,-29,37,37,37,-51,37,37,37,-59,37,37,37,37,37,37,37,37,-55,-57,37,-30,-2,37,37,37,-56,-22,37,-23,37,-58,37,37,37,]),'SYSTEM_ARR_CONTAINS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,57,58,59,60,63,64,65,66,67,72,76,87,91,92,95,97,98,99,100,101,102,103,108,118,119,121,126,127,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,176,177,178,179,187,188,196,208,209,213,216,217,219,228,229,231,245,246,249,256,259,265,266,267,268,271,273,274,275,277,],[38,38,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,38,38,38,-9,38,38,38,38,38,38,-90,38,-28,-71,38,38,38,38,-73,38,38,38,38,38,38,38,38,38,38,-61,-60,-91,-72,38,38,38,38,38,38,38,38,38,38,38,38,38,-29,38,38,38,-51,38,38,38,-59,38,38,38,38,38,38,38,38,-55,-57,38,-30,-2,38,38,38,-56,-22,38,-23,38,-58,38,38,38,]),'SYSTEM_ARR_INDEXOF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,57,58,59,60,63,64,65,66,67,72,76,87,91,92,95,97,98,99,100,101,102,103,108,118,119,121,126,127,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,176,177,178,179,187,188,196,208,209,213,216,217,219,228,229,231,245,246,249,256,259,265,266,267,268,271,273,274,275,277,],[39,39,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,39,39,39,-9,39,39,39,39,39,39,-90,39,-28,-71,39,39,39,39,-73,39,39,39,39,39,39,39,39,39,39,-61,-60,-91,-72,39,39,39,39,39,39,39,39,39,39,39,39,39,-29,39,39,39,-51,39,39,39,-59,39,39,39,39,39,39,39,39,-55,-57,39,-30,-2,39,39,39,-56,-22,39,-23,39,-58,39,39,39,]),'SYSTEM_ARR_AVG':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,26,52,54,57,58,59,60,63,64,65,66,67,72,76,87,91,92,95,97,98,99,100,101,102,103,108,118,119,121,126,127,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,176,177,178,179,187,188,196,208,209,213,216,217,219,228,229,231,245,246,249,256,259,265,266,267,268,271,273,274,275,277,],[40,40,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,40,40,40,-9,40,40,40,40,40,40,-90,40,-28,-71,40,40,40,40,-73,40,40,40,40,40,40,40,40,40,40,-61,-60,-91,-72,40,40,40,40,40,40,40,40,40,40,40,40,40,-29,40,40,40,-51,40,40,40,-59,40,40,40,40,40,40,40,40,-55,-57,40,-30,-2,40,40,40,-56,-22,40,-23,40,-58,40,40,40,]),'KEYWORD_INT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,64,65,66,67,92,105,126,127,163,176,177,178,210,211,223,228,229,245,246,249,265,266,267,268,271,273,274,275,277,],[41,41,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,41,41,-9,41,-90,41,-28,-71,-73,41,-91,-72,-29,-51,41,41,41,41,41,-55,-57,-30,-2,41,-56,-22,41,-23,41,-58,41,41,41,]),'KEYWORD_FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,64,65,66,67,92,105,126,127,163,176,177,178,210,211,223,228,229,245,246,249,265,266,267,268,271,273,274,275,277,],[42,42,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,42,42,-9,42,-90,42,-28,-71,-73,42,-91,-72,-29,-51,42,42,42,42,42,-55,-57,-30,-2,42,-56,-22,42,-23,42,-58,42,42,42,]),'KEYWORD_CHAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,64,65,66,67,92,105,126,127,163,176,177,178,210,211,223,228,229,245,246,249,265,266,267,268,271,273,274,275,277,],[43,43,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,43,43,-9,43,-90,43,-28,-71,-73,43,-91,-72,-29,-51,43,43,43,43,43,-55,-57,-30,-2,43,-56,-22,43,-23,43,-58,43,43,43,]),'KEYWORD_VOID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,64,65,66,67,92,105,126,127,163,176,177,178,210,211,223,228,229,245,246,249,265,266,267,268,271,273,274,275,277,],[44,44,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,44,44,-9,44,-90,44,-28,-71,-73,44,-91,-72,-29,-51,44,44,44,44,44,-55,-57,-30,-2,44,-56,-22,44,-23,44,-58,44,44,44,]),'KEYWORD_STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,64,65,66,67,92,105,126,127,163,176,177,178,210,211,223,228,229,245,246,249,265,266,267,268,271,273,274,275,277,],[45,45,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,45,45,-9,45,-90,45,-28,-71,-73,45,-91,-72,-29,-51,45,45,45,45,45,-55,-57,-30,-2,45,-56,-22,45,-23,45,-58,45,45,45,]),'KEYWORD_BOOL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,64,65,66,67,92,105,126,127,163,176,177,178,210,211,223,228,229,245,246,249,265,266,267,268,271,273,274,275,277,],[46,46,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,46,46,-9,46,-90,46,-28,-71,-73,46,-91,-72,-29,-51,46,46,46,46,46,-55,-57,-30,-2,46,-56,-22,46,-23,46,-58,46,46,46,]),'KEYWORD_FILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,64,65,66,67,92,105,126,127,163,176,177,178,210,211,223,228,229,245,246,249,265,266,267,268,271,273,274,275,277,],[47,47,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,47,47,-9,47,-90,47,-28,-71,-73,47,-91,-72,-29,-51,47,47,47,47,47,-55,-57,-30,-2,47,-56,-22,47,-23,47,-58,47,47,47,]),'KEYWORD_SOCKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,64,65,66,67,92,105,126,127,163,176,177,178,210,211,223,228,229,245,246,249,265,266,267,268,271,273,274,275,277,],[48,48,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,48,48,-9,48,-90,48,-28,-71,-73,48,-91,-72,-29,-51,48,48,48,48,48,-55,-57,-30,-2,48,-56,-22,48,-23,48,-58,48,48,48,]),'KEYWORD_DICT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,64,65,66,67,92,105,126,127,163,176,177,178,210,211,223,228,229,245,246,249,265,266,267,268,271,273,274,275,277,],[49,49,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,49,49,-9,49,-90,49,-28,-71,-73,49,-91,-72,-29,-51,49,49,49,49,49,-55,-57,-30,-2,49,-56,-22,49,-23,49,-58,49,49,49,]),'KEYWORD_REGEX':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,64,65,66,67,92,105,126,127,163,176,177,178,210,211,223,228,229,245,246,249,265,266,267,268,271,273,274,275,277,],[50,50,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,50,50,-9,50,-90,50,-28,-71,-73,50,-91,-72,-29,-51,50,50,50,50,50,-55,-57,-30,-2,50,-56,-22,50,-23,50,-58,50,50,50,]),'KEYWORD_ARRAY':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,24,52,62,64,65,66,67,92,105,126,127,163,176,177,178,210,211,223,228,229,245,246,249,265,266,267,268,271,273,274,275,277,],[51,51,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,51,51,-9,51,-90,51,-28,-71,-73,51,-91,-72,-29,-51,51,51,51,51,51,-55,-57,-30,-2,51,-56,-22,51,-23,51,-58,51,51,51,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,52,64,66,67,92,126,127,163,176,228,229,245,246,265,266,268,273,],[0,-1,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-9,-90,-28,-71,-73,-91,-72,-29,-51,-55,-57,-30,-2,-56,-22,-23,-58,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,24,52,55,56,64,65,66,67,69,70,71,73,74,75,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,110,112,126,127,145,147,148,149,150,155,163,173,175,176,191,192,193,194,195,197,198,199,200,201,202,203,204,205,206,207,212,214,215,218,228,229,237,238,245,246,254,255,258,260,261,262,263,264,265,266,268,269,273,275,276,277,],[-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,64,-9,-137,-138,-90,126,-28,-71,-97,-98,-99,-102,-105,-110,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,-128,-129,-130,-70,-73,-75,-139,-91,-72,-118,207,-132,-133,-134,-79,-29,-74,-140,-51,-100,-101,-103,-104,-92,-106,-107,-108,-109,-111,-112,-114,-115,-116,-127,-131,-80,-82,-83,-86,-55,-57,-135,-136,-30,-2,268,-24,-76,-77,-81,-84,-85,-87,-56,-22,-23,-25,-58,-27,-78,-26,]),'KEYWORD_CASE':([3,4,5,6,7,8,9,10,11,12,13,14,15,52,64,66,67,92,126,127,163,176,228,229,235,245,246,254,255,265,266,268,269,273,275,277,],[-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-9,-90,-28,-71,-73,-91,-72,-29,-51,-55,-57,256,-30,-2,256,-24,-56,-22,-23,-25,-58,-27,-26,]),'KEYWORD_DEFAULT':([3,4,5,6,7,8,9,10,11,12,13,14,15,52,64,66,67,92,126,127,163,176,228,229,235,245,246,254,255,265,266,268,269,273,275,277,],[-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-9,-90,-28,-71,-73,-91,-72,-29,-51,-55,-57,257,-30,-2,257,-24,-56,-22,-23,-25,-58,-27,-26,]),'KEYWORD_ELSE':([4,5,6,7,8,9,10,11,12,13,14,15,64,66,67,92,126,127,163,176,228,229,245,246,265,266,268,273,],[-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-90,-28,-71,-73,-91,-72,-29,-51,249,-57,-30,-2,-56,-22,-23,-58,]),'ASSIGN':([17,18,30,53,55,56,104,106,107,112,122,124,172,175,185,186,189,225,226,248,],[-52,58,-53,-70,-137,-138,164,-31,-32,-139,188,-52,-35,-140,-52,-53,-70,-36,-33,-34,]),'LPAREN':([17,19,20,22,23,26,31,32,33,34,35,36,37,38,39,40,53,54,57,58,59,60,63,72,76,79,87,91,95,97,98,99,100,101,102,103,108,117,118,119,121,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,179,185,187,188,196,208,209,213,216,217,219,231,245,256,259,],[54,59,60,62,63,87,94,95,96,97,98,99,100,101,102,103,105,87,87,87,87,87,87,87,87,54,87,87,87,87,87,87,87,87,87,87,87,179,87,-61,-60,87,87,87,87,87,87,87,87,87,87,87,87,87,-29,87,87,87,87,54,-59,87,87,87,87,87,87,87,87,87,-30,87,87,]),'LBRACKET':([17,26,28,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,63,72,79,87,91,95,97,98,99,100,101,102,103,106,108,112,118,119,121,124,163,164,170,172,174,175,179,185,187,188,189,196,208,209,213,216,217,219,225,226,231,245,248,256,259,],[57,72,93,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,108,72,57,-138,72,72,72,72,72,72,57,72,72,72,72,72,72,72,72,72,72,170,72,-139,72,-61,-60,57,-29,72,72,-35,72,-140,72,57,-59,72,108,72,72,72,72,72,72,72,-36,-33,72,-30,-34,72,72,]),'SEMICOLON':([25,26,27,53,55,56,62,68,69,70,71,73,74,75,77,78,79,80,81,82,83,84,85,86,88,89,90,104,106,107,110,112,114,118,119,120,121,145,155,163,172,173,175,180,181,182,183,184,185,186,187,189,191,192,193,194,195,197,198,199,200,201,202,203,204,205,206,207,212,214,215,218,220,225,226,234,245,248,250,252,253,258,260,261,262,263,264,276,],[66,67,92,-70,-137,-138,119,127,-97,-98,-99,-102,-105,-110,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,-128,-129,-130,163,-31,-32,-75,-139,176,-70,-61,187,-60,-118,-79,-29,-35,-74,-140,231,-64,-65,-66,-67,-119,-129,-59,-70,-100,-101,-103,-104,-92,-106,-107,-108,-109,-111,-112,-114,-115,-116,-127,-131,-80,-82,-83,-86,245,-36,-33,-54,-30,-34,266,-68,-69,-76,-77,-81,-84,-85,-87,-78,]),'MINUS':([26,54,55,56,57,58,59,60,63,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,95,97,98,99,100,101,102,103,108,110,112,118,119,121,128,129,130,131,136,137,138,139,140,141,142,143,144,145,155,163,164,170,173,174,175,179,185,186,187,188,196,197,198,199,200,201,202,203,204,205,206,207,208,209,212,213,214,215,216,217,218,219,231,233,245,256,258,259,260,261,262,263,264,276,],[76,76,-137,-138,76,76,76,76,76,76,141,-110,76,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,76,-128,-129,-130,76,76,76,76,76,76,76,76,76,76,-75,-139,76,-61,-60,76,76,76,76,76,76,76,76,76,76,76,76,76,-118,-79,-29,76,76,-74,76,-140,76,233,-129,-59,76,76,141,141,141,141,-111,-112,-114,-115,-116,-127,-131,76,76,-80,76,-82,-83,76,76,-86,76,76,253,-30,76,-76,76,-77,-81,-84,-85,-87,-78,]),'INT_LITERAL':([26,54,57,58,59,60,63,72,76,87,91,95,97,98,99,100,101,102,103,108,118,119,121,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,179,187,188,196,208,209,213,216,217,219,231,245,256,259,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-61,-60,80,80,80,80,80,80,80,80,80,80,80,80,80,-29,80,80,80,80,-59,80,80,80,80,80,80,80,80,80,-30,80,80,]),'FLOAT_LITERAL':([26,54,57,58,59,60,63,72,76,87,91,95,97,98,99,100,101,102,103,108,118,119,121,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,179,187,188,196,208,209,213,216,217,219,231,245,256,259,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-61,-60,81,81,81,81,81,81,81,81,81,81,81,81,81,-29,81,81,81,81,-59,81,81,81,81,81,81,81,81,81,-30,81,81,]),'STRING_LITERAL':([26,54,57,58,59,60,63,72,76,87,91,95,97,98,99,100,101,102,103,108,118,119,121,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,179,187,188,196,208,209,213,216,217,219,231,245,256,259,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-61,-60,82,82,82,82,82,82,82,82,82,82,82,82,82,-29,82,82,82,82,-59,82,82,82,82,82,82,82,82,82,-30,82,82,]),'CHAR_LITERAL':([26,54,57,58,59,60,63,72,76,87,91,95,97,98,99,100,101,102,103,108,118,119,121,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,179,187,188,196,208,209,213,216,217,219,231,245,256,259,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-61,-60,83,83,83,83,83,83,83,83,83,83,83,83,83,-29,83,83,83,83,-59,83,83,83,83,83,83,83,83,83,-30,83,83,]),'KEYWORD_TRUE':([26,54,57,58,59,60,63,72,76,87,91,95,97,98,99,100,101,102,103,108,118,119,121,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,179,187,188,196,208,209,213,216,217,219,231,245,256,259,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-61,-60,84,84,84,84,84,84,84,84,84,84,84,84,84,-29,84,84,84,84,-59,84,84,84,84,84,84,84,84,84,-30,84,84,]),'KEYWORD_FALSE':([26,54,57,58,59,60,63,72,76,87,91,95,97,98,99,100,101,102,103,108,118,119,121,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,179,187,188,196,208,209,213,216,217,219,231,245,256,259,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-61,-60,85,85,85,85,85,85,85,85,85,85,85,85,85,-29,85,85,85,85,-59,85,85,85,85,85,85,85,85,85,-30,85,85,]),'KEYWORD_NULL':([26,54,57,58,59,60,63,72,76,87,91,95,97,98,99,100,101,102,103,108,118,119,121,128,129,130,131,136,137,138,139,140,141,142,143,144,163,164,170,174,179,187,188,196,208,209,213,216,217,219,231,245,256,259,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-61,-60,86,86,86,86,86,86,86,86,86,86,86,86,86,-29,86,86,86,86,-59,86,86,86,86,86,86,86,86,86,-30,86,86,]),'RPAREN':([28,29,41,42,43,44,45,46,47,48,49,50,51,54,55,56,69,70,71,73,74,75,77,78,79,80,81,82,83,84,85,86,88,89,90,96,105,109,110,111,112,115,116,125,145,146,152,155,156,158,159,162,166,167,168,169,173,175,181,182,183,184,185,186,191,192,193,194,195,197,198,199,200,201,202,203,204,205,206,207,212,214,215,218,221,227,230,231,234,239,240,241,242,243,244,247,251,252,253,258,260,261,262,263,264,272,276,],[-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,110,-137,-138,-97,-98,-99,-102,-105,-110,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,-128,-129,-130,155,-70,173,-75,-88,-139,177,178,190,-118,206,-50,-79,212,214,215,218,222,-3,-4,-5,-74,-140,-64,-65,-66,-67,-119,-129,-100,-101,-103,-104,-92,-106,-107,-108,-109,-111,-112,-114,-115,-116,-127,-131,-80,-82,-83,-86,-7,-89,250,-70,-54,258,260,261,262,263,264,-6,267,-68,-69,-76,-77,-81,-84,-85,-87,276,-78,]),'COMMA':([28,29,41,42,43,44,45,46,47,48,49,50,51,55,56,69,70,71,73,74,75,77,78,79,80,81,82,83,84,85,86,88,89,90,109,110,111,112,133,135,145,148,150,152,153,154,155,157,160,161,162,167,169,173,175,191,192,193,194,195,197,198,199,200,201,202,203,204,205,206,207,212,214,215,218,221,227,236,237,238,240,247,258,260,261,262,263,264,276,],[-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-137,-138,-97,-98,-99,-102,-105,-110,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,-128,-129,-130,174,-75,-88,-139,196,-95,-118,208,-134,-50,210,211,-79,213,216,217,219,223,-5,-74,-140,-100,-101,-103,-104,-92,-106,-107,-108,-109,-111,-112,-114,-115,-116,-127,-131,-80,-82,-83,-86,-7,-89,-96,-135,-136,259,-6,-76,-77,-81,-84,-85,-87,-78,]),'MUL':([55,56,75,77,78,79,80,81,82,83,84,85,86,88,89,90,110,112,145,155,173,175,185,186,201,202,203,204,205,206,207,212,214,215,218,258,260,261,262,263,264,276,],[-137,-138,142,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,-128,-129,-130,-75,-139,-118,-79,-74,-140,-119,-129,142,142,-114,-115,-116,-127,-131,-80,-82,-83,-86,-76,-77,-81,-84,-85,-87,-78,]),'DIV':([55,56,75,77,78,79,80,81,82,83,84,85,86,88,89,90,110,112,145,155,173,175,185,186,201,202,203,204,205,206,207,212,214,215,218,258,260,261,262,263,264,276,],[-137,-138,143,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,-128,-129,-130,-75,-139,-118,-79,-74,-140,-119,-129,143,143,-114,-115,-116,-127,-131,-80,-82,-83,-86,-76,-77,-81,-84,-85,-87,-78,]),'MOD':([55,56,75,77,78,79,80,81,82,83,84,85,86,88,89,90,110,112,145,155,173,175,185,186,201,202,203,204,205,206,207,212,214,215,218,258,260,261,262,263,264,276,],[-137,-138,144,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,-128,-129,-130,-75,-139,-118,-79,-74,-140,-119,-129,144,144,-114,-115,-116,-127,-131,-80,-82,-83,-86,-76,-77,-81,-84,-85,-87,-78,]),'PLUS':([55,56,74,75,77,78,79,80,81,82,83,84,85,86,88,89,90,110,112,145,155,173,175,185,186,197,198,199,200,201,202,203,204,205,206,207,212,214,215,218,232,258,260,261,262,263,264,276,],[-137,-138,140,-110,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,-128,-129,-130,-75,-139,-118,-79,-74,-140,232,-129,140,140,140,140,-111,-112,-114,-115,-116,-127,-131,-80,-82,-83,-86,252,-76,-77,-81,-84,-85,-87,-78,]),'GT':([55,56,73,74,75,77,78,79,80,81,82,83,84,85,86,88,89,90,110,112,145,155,173,175,185,186,193,194,197,198,199,200,201,202,203,204,205,206,207,212,214,215,218,258,260,261,262,263,264,276,],[-137,-138,136,-105,-110,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,-128,-129,-130,-75,-139,-118,-79,-74,-140,-119,-129,136,136,-106,-107,-108,-109,-111,-112,-114,-115,-116,-127,-131,-80,-82,-83,-86,-76,-77,-81,-84,-85,-87,-78,]),'LT':([55,56,73,74,75,77,78,79,80,81,82,83,84,85,86,88,89,90,110,112,145,155,173,175,185,186,193,194,197,198,199,200,201,202,203,204,205,206,207,212,214,215,218,258,260,261,262,263,264,276,],[-137,-138,137,-105,-110,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,-128,-129,-130,-75,-139,-118,-79,-74,-140,-119,-129,137,137,-106,-107,-108,-109,-111,-112,-114,-115,-116,-127,-131,-80,-82,-83,-86,-76,-77,-81,-84,-85,-87,-78,]),'GEQ':([55,56,73,74,75,77,78,79,80,81,82,83,84,85,86,88,89,90,110,112,145,155,173,175,185,186,193,194,197,198,199,200,201,202,203,204,205,206,207,212,214,215,218,258,260,261,262,263,264,276,],[-137,-138,138,-105,-110,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,-128,-129,-130,-75,-139,-118,-79,-74,-140,-119,-129,138,138,-106,-107,-108,-109,-111,-112,-114,-115,-116,-127,-131,-80,-82,-83,-86,-76,-77,-81,-84,-85,-87,-78,]),'LEQ':([55,56,73,74,75,77,78,79,80,81,82,83,84,85,86,88,89,90,110,112,145,155,173,175,185,186,193,194,197,198,199,200,201,202,203,204,205,206,207,212,214,215,218,258,260,261,262,263,264,276,],[-137,-138,139,-105,-110,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,-128,-129,-130,-75,-139,-118,-79,-74,-140,-119,-129,139,139,-106,-107,-108,-109,-111,-112,-114,-115,-116,-127,-131,-80,-82,-83,-86,-76,-77,-81,-84,-85,-87,-78,]),'EQ':([55,56,71,73,74,75,77,78,79,80,81,82,83,84,85,86,88,89,90,110,112,145,155,173,175,185,186,191,192,193,194,197,198,199,200,201,202,203,204,205,206,207,212,214,215,218,258,260,261,262,263,264,276,],[-137,-138,130,-102,-105,-110,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,-128,-129,-130,-75,-139,-118,-79,-74,-140,-119,-129,130,130,-103,-104,-106,-107,-108,-109,-111,-112,-114,-115,-116,-127,-131,-80,-82,-83,-86,-76,-77,-81,-84,-85,-87,-78,]),'NEQ':([55,56,71,73,74,75,77,78,79,80,81,82,83,84,85,86,88,89,90,110,112,145,155,173,175,185,186,191,192,193,194,197,198,199,200,201,202,203,204,205,206,207,212,214,215,218,258,260,261,262,263,264,276,],[-137,-138,131,-102,-105,-110,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,-128,-129,-130,-75,-139,-118,-79,-74,-140,-119,-129,131,131,-103,-104,-106,-107,-108,-109,-111,-112,-114,-115,-116,-127,-131,-80,-82,-83,-86,-76,-77,-81,-84,-85,-87,-78,]),'AND':([55,56,69,71,73,74,75,77,78,79,80,81,82,83,84,85,86,88,89,90,110,112,145,155,173,175,185,186,191,192,193,194,197,198,199,200,201,202,203,204,205,206,207,212,214,215,218,258,260,261,262,263,264,276,],[-137,-138,128,-99,-102,-105,-110,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,-128,-129,-130,-75,-139,-118,-79,-74,-140,-119,-129,-100,-101,-103,-104,-106,-107,-108,-109,-111,-112,-114,-115,-116,-127,-131,-80,-82,-83,-86,-76,-77,-81,-84,-85,-87,-78,]),'OR':([55,56,69,71,73,74,75,77,78,79,80,81,82,83,84,85,86,88,89,90,110,112,145,155,173,175,185,186,191,192,193,194,197,198,199,200,201,202,203,204,205,206,207,212,214,215,218,258,260,261,262,263,264,276,],[-137,-138,129,-99,-102,-105,-110,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,-128,-129,-130,-75,-139,-118,-79,-74,-140,-119,-129,-100,-101,-103,-104,-106,-107,-108,-109,-111,-112,-114,-115,-116,-127,-131,-80,-82,-83,-86,-76,-77,-81,-84,-85,-87,-78,]),'RBRACKET':([55,56,69,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,88,89,90,93,108,110,112,113,132,133,134,135,145,155,170,171,173,175,191,192,193,194,195,197,198,199,200,201,202,203,204,205,206,207,212,214,215,218,224,236,258,260,261,262,263,264,276,],[-137,-138,-97,-98,-99,-70,-102,-105,-110,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,-128,-129,-130,152,172,-75,-139,175,195,-93,-94,-95,-118,-79,225,226,-74,-140,-100,-101,-103,-104,-92,-106,-107,-108,-109,-111,-112,-114,-115,-116,-127,-131,-80,-82,-83,-86,248,-96,-76,-77,-81,-84,-85,-87,-78,]),'COLON':([55,56,69,70,71,73,74,75,77,78,79,80,81,82,83,84,85,86,88,89,90,110,112,145,151,155,173,175,191,192,193,194,195,197,198,199,200,201,202,203,204,205,206,207,212,214,215,218,257,258,260,261,262,263,264,270,276,],[-137,-138,-97,-98,-99,-102,-105,-110,-113,-117,-119,-120,-121,-122,-123,-124,-125,-126,-128,-129,-130,-75,-139,-118,209,-79,-74,-140,-100,-101,-103,-104,-92,-106,-107,-108,-109,-111,-112,-114,-115,-116,-127,-131,-80,-82,-83,-86,271,-76,-77,-81,-84,-85,-87,274,-78,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,24,271,274,],[2,65,275,277,]),'statement':([0,2,21,24,65,177,178,249,267,271,274,275,277,],[3,52,61,3,52,228,229,265,273,3,3,52,52,]),'declaration_statement':([0,2,21,24,62,65,177,178,249,267,271,274,275,277,],[4,4,4,4,121,4,4,4,4,4,4,4,4,4,]),'assignment_statement':([0,2,21,24,65,177,178,249,267,271,274,275,277,],[5,5,5,5,5,5,5,5,5,5,5,5,5,]),'if_statement':([0,2,21,24,65,177,178,249,267,271,274,275,277,],[6,6,6,6,6,6,6,6,6,6,6,6,6,]),'while_statement':([0,2,21,24,65,177,178,249,267,271,274,275,277,],[7,7,7,7,7,7,7,7,7,7,7,7,7,]),'do_while_statement':([0,2,21,24,65,177,178,249,267,271,274,275,277,],[8,8,8,8,8,8,8,8,8,8,8,8,8,]),'for_statement':([0,2,21,24,65,177,178,249,267,271,274,275,277,],[9,9,9,9,9,9,9,9,9,9,9,9,9,]),'switch_statement':([0,2,21,24,65,177,178,249,267,271,274,275,277,],[10,10,10,10,10,10,10,10,10,10,10,10,10,]),'break_statement':([0,2,21,24,65,177,178,249,267,271,274,275,277,],[11,11,11,11,11,11,11,11,11,11,11,11,11,]),'return_statement':([0,2,21,24,65,177,178,249,267,271,274,275,277,],[12,12,12,12,12,12,12,12,12,12,12,12,12,]),'function_call_statement':([0,2,21,24,65,177,178,249,267,271,274,275,277,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'block_statement':([0,2,21,24,65,177,178,222,249,267,271,274,275,277,],[14,14,14,14,14,14,14,246,14,14,14,14,14,14,]),'function_definition':([0,2,21,24,65,177,178,249,267,271,274,275,277,],[15,15,15,15,15,15,15,15,15,15,15,15,15,]),'type_specifier':([0,2,21,24,62,65,105,177,178,210,211,223,249,267,271,274,275,277,],[16,16,16,16,123,16,165,16,16,239,240,165,16,16,16,16,16,16,]),'left_hand_side':([0,2,21,24,62,65,118,177,178,231,249,267,271,274,275,277,],[18,18,18,18,122,18,122,18,18,122,18,18,18,18,18,18,]),'function_call':([0,2,21,24,26,54,57,58,59,60,63,65,72,76,87,91,95,97,98,99,100,101,102,103,108,118,128,129,130,131,136,137,138,139,140,141,142,143,144,164,170,174,177,178,179,188,196,208,209,213,216,217,219,231,249,256,259,267,271,274,275,277,],[27,27,27,27,88,88,88,88,88,88,88,27,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,27,27,88,88,88,88,88,88,88,88,88,88,27,88,88,27,27,27,27,27,]),'primitive_type':([0,2,21,24,62,65,105,177,178,210,211,223,249,267,271,274,275,277,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'array_type':([0,2,21,24,62,65,105,177,178,210,211,223,249,267,271,274,275,277,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'subscript_access':([0,2,21,24,26,54,57,58,59,60,62,63,65,72,76,87,91,95,97,98,99,100,101,102,103,108,118,128,129,130,131,136,137,138,139,140,141,142,143,144,164,170,174,177,178,179,188,196,208,209,213,216,217,219,231,249,256,259,267,271,274,275,277,],[30,30,30,30,89,89,89,89,89,89,30,89,30,89,89,89,89,89,89,89,89,89,89,89,89,89,186,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,30,30,89,89,89,89,89,89,89,89,89,186,30,89,89,30,30,30,30,30,]),'subscript_specifier_list':([17,79,124,185,],[55,55,55,55,]),'subscript_specifier':([17,55,79,124,185,],[56,112,56,56,56,]),'expression':([26,54,57,58,59,60,63,72,87,91,95,97,98,99,100,101,102,103,108,118,164,170,174,179,188,196,208,209,213,216,217,219,231,256,259,],[68,111,113,114,115,116,125,135,146,151,154,156,157,158,159,160,161,162,171,181,220,224,227,230,234,236,151,238,241,242,243,244,181,270,272,]),'logical_expression':([26,54,57,58,59,60,63,72,87,91,95,97,98,99,100,101,102,103,108,118,164,170,174,179,188,196,208,209,213,216,217,219,231,256,259,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'initializer_list':([26,54,57,58,59,60,63,72,87,91,95,97,98,99,100,101,102,103,108,118,164,170,174,179,188,196,208,209,213,216,217,219,231,256,259,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'equality_expression':([26,54,57,58,59,60,63,72,87,91,95,97,98,99,100,101,102,103,108,118,128,129,164,170,174,179,188,196,208,209,213,216,217,219,231,256,259,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,191,192,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'relational_expression':([26,54,57,58,59,60,63,72,87,91,95,97,98,99,100,101,102,103,108,118,128,129,130,131,164,170,174,179,188,196,208,209,213,216,217,219,231,256,259,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,193,194,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'additive_expression':([26,54,57,58,59,60,63,72,87,91,95,97,98,99,100,101,102,103,108,118,128,129,130,131,136,137,138,139,164,170,174,179,188,196,208,209,213,216,217,219,231,256,259,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,197,198,199,200,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'multiplicative_expression':([26,54,57,58,59,60,63,72,87,91,95,97,98,99,100,101,102,103,108,118,128,129,130,131,136,137,138,139,140,141,164,170,174,179,188,196,208,209,213,216,217,219,231,256,259,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,201,202,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'unary_expression':([26,54,57,58,59,60,63,72,76,87,91,95,97,98,99,100,101,102,103,108,118,128,129,130,131,136,137,138,139,140,141,142,143,144,164,170,174,179,188,196,208,209,213,216,217,219,231,256,259,],[77,77,77,77,77,77,77,77,145,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,203,204,205,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'primary_expression':([26,54,57,58,59,60,63,72,76,87,91,95,97,98,99,100,101,102,103,108,118,128,129,130,131,136,137,138,139,140,141,142,143,144,164,170,174,179,188,196,208,209,213,216,217,219,231,256,259,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'dictionary_literal':([26,54,57,58,59,60,63,72,76,87,91,95,97,98,99,100,101,102,103,108,118,128,129,130,131,136,137,138,139,140,141,142,143,144,164,170,174,179,188,196,208,209,213,216,217,219,231,256,259,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'array_specifier_opt':([53,189,],[104,104,]),'array_specifier':([53,189,],[106,106,]),'empty':([53,72,91,105,118,189,231,],[107,134,149,168,184,107,184,]),'argument_list':([54,],[109,]),'for_init':([62,],[118,]),'assignment_statement_no_semi':([62,118,231,],[120,182,182,]),'expression_list_opt':([72,],[132,]),'expression_list':([72,],[133,]),'key_value_list_opt':([91,],[147,]),'key_value_list':([91,],[148,]),'key_value':([91,208,],[150,237,]),'params':([105,],[166,]),'param_list':([105,],[167,]),'param':([105,223,],[169,247,]),'expression_opt':([118,231,],[180,251,]),'increment_decrement':([118,231,],[183,183,]),'case_list':([235,],[254,]),'case_clause':([235,254,],[255,269,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',346),
  ('function_definition -> type_specifier IDENTIFIER LPAREN params RPAREN block_statement','function_definition',6,'p_function_definition','parser.py',350),
  ('params -> param_list','params',1,'p_params','parser.py',358),
  ('params -> empty','params',1,'p_params','parser.py',359),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',366),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',367),
  ('param -> type_specifier IDENTIFIER','param',2,'p_param','parser.py',374),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',378),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',379),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',386),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',387),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',388),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',389),
  ('statement -> do_while_statement','statement',1,'p_statement','parser.py',390),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',391),
  ('statement -> switch_statement','statement',1,'p_statement','parser.py',392),
  ('statement -> break_statement','statement',1,'p_statement','parser.py',393),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',394),
  ('statement -> function_call_statement','statement',1,'p_statement','parser.py',395),
  ('statement -> block_statement','statement',1,'p_statement','parser.py',396),
  ('statement -> function_definition','statement',1,'p_statement','parser.py',397),
  ('do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN SEMICOLON','do_while_statement',7,'p_do_while_statement','parser.py',401),
  ('switch_statement -> KEYWORD_SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE','switch_statement',7,'p_switch_statement','parser.py',405),
  ('case_list -> case_clause','case_list',1,'p_case_list','parser.py',409),
  ('case_list -> case_list case_clause','case_list',2,'p_case_list','parser.py',410),
  ('case_clause -> KEYWORD_CASE expression COLON statement_list','case_clause',4,'p_case_clause','parser.py',417),
  ('case_clause -> KEYWORD_DEFAULT COLON statement_list','case_clause',3,'p_case_clause','parser.py',418),
  ('break_statement -> KEYWORD_BREAK SEMICOLON','break_statement',2,'p_break_statement','parser.py',425),
  ('declaration_statement -> type_specifier IDENTIFIER array_specifier_opt SEMICOLON','declaration_statement',4,'p_declaration_statement','parser.py',429),
  ('declaration_statement -> type_specifier IDENTIFIER array_specifier_opt ASSIGN expression SEMICOLON','declaration_statement',6,'p_declaration_statement','parser.py',430),
  ('array_specifier_opt -> array_specifier','array_specifier_opt',1,'p_array_specifier_opt','parser.py',452),
  ('array_specifier_opt -> empty','array_specifier_opt',1,'p_array_specifier_opt','parser.py',453),
  ('array_specifier -> LBRACKET expression RBRACKET','array_specifier',3,'p_array_specifier','parser.py',457),
  ('array_specifier -> array_specifier LBRACKET expression RBRACKET','array_specifier',4,'p_array_specifier','parser.py',458),
  ('array_specifier -> LBRACKET RBRACKET','array_specifier',2,'p_array_specifier','parser.py',459),
  ('array_specifier -> array_specifier LBRACKET RBRACKET','array_specifier',3,'p_array_specifier','parser.py',460),
  ('type_specifier -> primitive_type','type_specifier',1,'p_type_specifier','parser.py',480),
  ('type_specifier -> array_type','type_specifier',1,'p_type_specifier','parser.py',481),
  ('primitive_type -> KEYWORD_INT','primitive_type',1,'p_primitive_type','parser.py',485),
  ('primitive_type -> KEYWORD_FLOAT','primitive_type',1,'p_primitive_type','parser.py',486),
  ('primitive_type -> KEYWORD_CHAR','primitive_type',1,'p_primitive_type','parser.py',487),
  ('primitive_type -> KEYWORD_VOID','primitive_type',1,'p_primitive_type','parser.py',488),
  ('primitive_type -> KEYWORD_STRING','primitive_type',1,'p_primitive_type','parser.py',489),
  ('primitive_type -> KEYWORD_BOOL','primitive_type',1,'p_primitive_type','parser.py',490),
  ('primitive_type -> KEYWORD_FILE','primitive_type',1,'p_primitive_type','parser.py',491),
  ('primitive_type -> KEYWORD_SOCKET','primitive_type',1,'p_primitive_type','parser.py',492),
  ('primitive_type -> KEYWORD_DICT','primitive_type',1,'p_primitive_type','parser.py',493),
  ('primitive_type -> KEYWORD_REGEX','primitive_type',1,'p_primitive_type','parser.py',494),
  ('primitive_type -> KEYWORD_ARRAY','primitive_type',1,'p_primitive_type','parser.py',495),
  ('array_type -> primitive_type LBRACKET RBRACKET','array_type',3,'p_array_type','parser.py',500),
  ('assignment_statement -> left_hand_side ASSIGN expression SEMICOLON','assignment_statement',4,'p_assignment_statement','parser.py',504),
  ('left_hand_side -> IDENTIFIER','left_hand_side',1,'p_left_hand_side','parser.py',508),
  ('left_hand_side -> subscript_access','left_hand_side',1,'p_left_hand_side','parser.py',509),
  ('assignment_statement_no_semi -> left_hand_side ASSIGN expression','assignment_statement_no_semi',3,'p_assignment_statement_no_semi','parser.py',516),
  ('if_statement -> KEYWORD_IF LPAREN expression RPAREN statement','if_statement',5,'p_if_statement','parser.py',520),
  ('if_statement -> KEYWORD_IF LPAREN expression RPAREN statement KEYWORD_ELSE statement','if_statement',7,'p_if_statement','parser.py',521),
  ('while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement','while_statement',5,'p_while_statement','parser.py',528),
  ('for_statement -> KEYWORD_FOR LPAREN for_init expression_opt SEMICOLON expression_opt RPAREN statement','for_statement',8,'p_for_statement','parser.py',532),
  ('for_init -> assignment_statement_no_semi SEMICOLON','for_init',2,'p_for_init','parser.py',536),
  ('for_init -> declaration_statement','for_init',1,'p_for_init','parser.py',537),
  ('for_init -> SEMICOLON','for_init',1,'p_for_init','parser.py',538),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',547),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_expression_statement','parser.py',548),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','parser.py',555),
  ('expression_opt -> assignment_statement_no_semi','expression_opt',1,'p_expression_opt','parser.py',556),
  ('expression_opt -> increment_decrement','expression_opt',1,'p_expression_opt','parser.py',557),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parser.py',558),
  ('increment_decrement -> IDENTIFIER PLUS PLUS','increment_decrement',3,'p_increment_decrement','parser.py',562),
  ('increment_decrement -> IDENTIFIER MINUS MINUS','increment_decrement',3,'p_increment_decrement','parser.py',563),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',574),
  ('return_statement -> KEYWORD_RETURN SEMICOLON','return_statement',2,'p_return_statement','parser.py',578),
  ('return_statement -> KEYWORD_RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',579),
  ('function_call_statement -> function_call SEMICOLON','function_call_statement',2,'p_function_call_statement','parser.py',586),
  ('function_call -> IDENTIFIER LPAREN argument_list RPAREN','function_call',4,'p_function_call','parser.py',590),
  ('function_call -> IDENTIFIER LPAREN RPAREN','function_call',3,'p_function_call','parser.py',591),
  ('function_call -> SYSTEM_INPUT LPAREN IDENTIFIER COMMA type_specifier RPAREN','function_call',6,'p_function_call','parser.py',592),
  ('function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier RPAREN','function_call',6,'p_function_call','parser.py',593),
  ('function_call -> SYSTEM_OUTPUT LPAREN expression COMMA type_specifier COMMA expression RPAREN','function_call',8,'p_function_call','parser.py',594),
  ('function_call -> KEYWORD_EXIT LPAREN RPAREN','function_call',3,'p_function_call','parser.py',595),
  ('function_call -> SYSTEM_SLEEP LPAREN expression RPAREN','function_call',4,'p_function_call','parser.py',596),
  ('function_call -> SYSTEM_ARR_PUSH LPAREN expression COMMA expression RPAREN','function_call',6,'p_function_call','parser.py',597),
  ('function_call -> SYSTEM_ARR_POP LPAREN expression RPAREN','function_call',4,'p_function_call','parser.py',598),
  ('function_call -> SYSTEM_ARR_SIZE LPAREN expression RPAREN','function_call',4,'p_function_call','parser.py',599),
  ('function_call -> SYSTEM_ARR_CONTAINS LPAREN expression COMMA expression RPAREN','function_call',6,'p_function_call','parser.py',600),
  ('function_call -> SYSTEM_ARR_INDEXOF LPAREN expression COMMA expression RPAREN','function_call',6,'p_function_call','parser.py',601),
  ('function_call -> SYSTEM_ARR_AVG LPAREN expression RPAREN','function_call',4,'p_function_call','parser.py',602),
  ('function_call -> SYSTEM_ARR_AVG LPAREN expression COMMA expression RPAREN','function_call',6,'p_function_call','parser.py',603),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',634),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','parser.py',635),
  ('block_statement -> LBRACE RBRACE','block_statement',2,'p_block_statement','parser.py',642),
  ('block_statement -> LBRACE statement_list RBRACE','block_statement',3,'p_block_statement','parser.py',643),
  ('initializer_list -> LBRACKET expression_list_opt RBRACKET','initializer_list',3,'p_initializer_list','parser.py',650),
  ('expression_list_opt -> expression_list','expression_list_opt',1,'p_expression_list_opt','parser.py',654),
  ('expression_list_opt -> empty','expression_list_opt',1,'p_expression_list_opt','parser.py',655),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',662),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',663),
  ('expression -> logical_expression','expression',1,'p_expression','parser.py',670),
  ('expression -> initializer_list','expression',1,'p_expression','parser.py',671),
  ('logical_expression -> equality_expression','logical_expression',1,'p_logical_expression','parser.py',675),
  ('logical_expression -> logical_expression AND equality_expression','logical_expression',3,'p_logical_expression','parser.py',676),
  ('logical_expression -> logical_expression OR equality_expression','logical_expression',3,'p_logical_expression','parser.py',677),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','parser.py',684),
  ('equality_expression -> equality_expression EQ relational_expression','equality_expression',3,'p_equality_expression','parser.py',685),
  ('equality_expression -> equality_expression NEQ relational_expression','equality_expression',3,'p_equality_expression','parser.py',686),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression','parser.py',693),
  ('relational_expression -> relational_expression GT additive_expression','relational_expression',3,'p_relational_expression','parser.py',694),
  ('relational_expression -> relational_expression LT additive_expression','relational_expression',3,'p_relational_expression','parser.py',695),
  ('relational_expression -> relational_expression GEQ additive_expression','relational_expression',3,'p_relational_expression','parser.py',696),
  ('relational_expression -> relational_expression LEQ additive_expression','relational_expression',3,'p_relational_expression','parser.py',697),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','parser.py',704),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',705),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',706),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','parser.py',713),
  ('multiplicative_expression -> multiplicative_expression MUL unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',714),
  ('multiplicative_expression -> multiplicative_expression DIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',715),
  ('multiplicative_expression -> multiplicative_expression MOD unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',716),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','parser.py',723),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','parser.py',724),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','parser.py',731),
  ('primary_expression -> INT_LITERAL','primary_expression',1,'p_primary_expression','parser.py',732),
  ('primary_expression -> FLOAT_LITERAL','primary_expression',1,'p_primary_expression','parser.py',733),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','parser.py',734),
  ('primary_expression -> CHAR_LITERAL','primary_expression',1,'p_primary_expression','parser.py',735),
  ('primary_expression -> KEYWORD_TRUE','primary_expression',1,'p_primary_expression','parser.py',736),
  ('primary_expression -> KEYWORD_FALSE','primary_expression',1,'p_primary_expression','parser.py',737),
  ('primary_expression -> KEYWORD_NULL','primary_expression',1,'p_primary_expression','parser.py',738),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','parser.py',739),
  ('primary_expression -> function_call','primary_expression',1,'p_primary_expression','parser.py',740),
  ('primary_expression -> subscript_access','primary_expression',1,'p_primary_expression','parser.py',741),
  ('primary_expression -> dictionary_literal','primary_expression',1,'p_primary_expression','parser.py',742),
  ('dictionary_literal -> LBRACE key_value_list_opt RBRACE','dictionary_literal',3,'p_dictionary_literal','parser.py',756),
  ('key_value_list_opt -> key_value_list','key_value_list_opt',1,'p_key_value_list_opt','parser.py',760),
  ('key_value_list_opt -> empty','key_value_list_opt',1,'p_key_value_list_opt','parser.py',761),
  ('key_value_list -> key_value','key_value_list',1,'p_key_value_list','parser.py',768),
  ('key_value_list -> key_value_list COMMA key_value','key_value_list',3,'p_key_value_list','parser.py',769),
  ('key_value -> expression COLON expression','key_value',3,'p_key_value','parser.py',776),
  ('subscript_access -> IDENTIFIER subscript_specifier_list','subscript_access',2,'p_subscript_access','parser.py',780),
  ('subscript_specifier_list -> subscript_specifier','subscript_specifier_list',1,'p_subscript_specifier_list','parser.py',784),
  ('subscript_specifier_list -> subscript_specifier_list subscript_specifier','subscript_specifier_list',2,'p_subscript_specifier_list','parser.py',785),
  ('subscript_specifier -> LBRACKET expression RBRACKET','subscript_specifier',3,'p_subscript_specifier','parser.py',792),
]
